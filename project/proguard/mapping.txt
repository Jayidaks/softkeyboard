com.anysoftkeyboard.AnyKeyboardContextProvider -> com.anysoftkeyboard.b:
    android.content.Context getApplicationContext() -> getApplicationContext
    void deleteLastCharactersFromInput(int) -> c
    android.content.SharedPreferences getSharedPreferences() -> e
com.anysoftkeyboard.AnySoftKeyboard -> com.anysoftkeyboard.AnySoftKeyboard:
    boolean TRACE_SDCARD -> c
    int mLastSelectionStart -> d
    int mLastSelectionEnd -> e
    com.anysoftkeyboard.Configuration mConfig -> f
    com.anysoftkeyboard.utils.ModifierKeyState mShiftKeyState -> g
    com.anysoftkeyboard.utils.ModifierKeyState mControlKeyState -> h
    com.anysoftkeyboard.keyboards.views.AnyKeyboardView mInputView -> i
    com.anysoftkeyboard.keyboards.views.CandidateView mCandidateView -> j
    long mLastDictionaryRefresh -> k
    com.anysoftkeyboard.dictionaries.Suggest mSuggest -> l
    android.view.inputmethod.CompletionInfo[] mCompletions -> m
    android.app.AlertDialog mOptionsDialog -> n
    android.app.AlertDialog mQuickTextKeyDialog -> o
    com.anysoftkeyboard.keyboards.KeyboardSwitcher mKeyboardSwitcher -> a
    com.anysoftkeyboard.keyboards.physical.HardKeyboardActionImpl mHardKeyboardAction -> p
    long mMetaState -> q
    java.util.HashSet mSentenceSeparators -> r
    com.anysoftkeyboard.dictionaries.AddableDictionary mUserDictionary -> s
    com.anysoftkeyboard.dictionaries.AutoDictionary mAutoDictionary -> t
    java.lang.StringBuilder mComposing -> u
    com.anysoftkeyboard.WordComposer mWord -> v
    int mOrientation -> w
    int mCommittedLength -> x
    boolean mPredicting -> y
    java.lang.CharSequence mBestWord -> z
    boolean mPredictionLandscape -> A
    boolean mPredictionOn -> B
    boolean mCompletionOn -> C
    boolean mAutoSpace -> D
    boolean mAutoCorrectOn -> E
    boolean mCapsLock -> F
    boolean mSmileyOnShortPress -> G
    java.lang.String mOverrideQuickTextText -> H
    boolean mAutoCap -> I
    boolean mQuickFixes -> J
    boolean mShowSuggestions -> K
    boolean mAutoComplete -> L
    java.lang.String mKeyboardChangeNotificationType -> M
    boolean mJustAccepted -> N
    java.lang.CharSequence mJustRevertedSeparator -> O
    android.media.AudioManager mAudioManager -> P
    boolean mSilentMode -> Q
    boolean mSoundOn -> R
    int mSoundVolume -> S
    android.os.Vibrator mVibrator -> T
    int mVibrationDuration -> U
    boolean mKeyboardInCondensedMode -> V
    com.anysoftkeyboard.AnySoftKeyboard INSTANCE -> W
    android.os.Handler mHandler -> X
    boolean mJustAddedAutoSpace -> Y
    boolean mLastCharacterWasShifted -> Z
    android.os.IBinder mImeToken -> b
    android.view.inputmethod.InputMethodManager mInputMethodManager -> aa
    boolean mConnectbotTabHack -> ab
    com.anysoftkeyboard.voice.VoiceInput mVoiceRecognitionTrigger -> ac
    android.content.BroadcastReceiver mReceiver -> ad
    android.view.inputmethod.InputConnection mEditingInput -> ae
    android.widget.TextView mCandidateCloseText -> af
    int[] $SWITCH_TABLE$com$anysoftkeyboard$dictionaries$TextEntryState$State -> ag
    com.anysoftkeyboard.AnySoftKeyboard getInstance() -> a
    android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl onCreateInputMethodInterface() -> onCreateInputMethodInterface
    void onCreate() -> onCreate
    void onUnbindInput() -> onUnbindInput
    void onDestroy() -> onDestroy
    void onFinishInputView(boolean) -> onFinishInputView
    android.view.View onCreateInputView() -> onCreateInputView
    android.view.View onCreateCandidatesView() -> onCreateCandidatesView
    void onStartInputView(android.view.inputmethod.EditorInfo,boolean) -> onStartInputView
    void onFinishInput() -> onFinishInput
    void onUpdateSelection(int,int,int,int,int,int) -> onUpdateSelection
    void hideWindow() -> hideWindow
    void onDisplayCompletions(android.view.inputmethod.CompletionInfo[]) -> onDisplayCompletions
    void clearSuggestions() -> k
    void setSuggestions(java.util.List,boolean,boolean,boolean) -> a
    void onComputeInsets(android.inputmethodservice.InputMethodService$Insets) -> onComputeInsets
    boolean onEvaluateFullscreenMode() -> onEvaluateFullscreenMode
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void notifyKeyboardChangeIfNeeded() -> l
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    java.lang.String getMetaKeysStates(java.lang.String) -> c
    void addToDictionaries(java.lang.CharSequence,int) -> a
    void commitTyped(android.view.inputmethod.InputConnection) -> a
    void updateShiftKeyState(android.view.inputmethod.EditorInfo) -> a
    void swapPunctuationAndSpace() -> m
    boolean addWordToDictionary(java.lang.String) -> a
    boolean isAlphabet(int) -> d
    void onMultiTap() -> b
    void onKey(int,int[],int,int) -> a
    boolean isConnectbot() -> n
    void sendTab() -> o
    void setKeyboardStuffBeforeSetToView(com.anysoftkeyboard.keyboards.AnyKeyboard) -> a
    void showLanguageSelectionDialog() -> p
    void onText(java.lang.CharSequence) -> a
    boolean isBackwordStopChar(int) -> e
    void handleBackword(android.view.inputmethod.InputConnection) -> b
    void handleDeleteLastCharacter(boolean) -> f
    void handleControl(boolean) -> g
    void handleShift(boolean) -> h
    void abortCorrection(boolean) -> i
    void handleCharacter(int,int[]) -> a
    void handleClose() -> q
    void postUpdateSuggestions(long) -> a
    void pickSuggestionManually(int,java.lang.CharSequence) -> a
    void revertLastWord(boolean) -> j
    void setNextSuggestions() -> r
    boolean isWordSeparator(int) -> f
    void nextKeyboard(android.view.inputmethod.EditorInfo,com.anysoftkeyboard.keyboards.KeyboardSwitcher$NextKeyboardType) -> a
    void setKeyboardFinalStuff(android.view.inputmethod.EditorInfo,com.anysoftkeyboard.keyboards.KeyboardSwitcher$NextKeyboardType,com.anysoftkeyboard.keyboards.AnyKeyboard) -> a
    void onSwipeRight(boolean) -> a
    void onSwipeLeft(boolean) -> b
    void onSwipeDown(boolean) -> c
    void onSwipeUp(boolean) -> d
    void onPinch() -> c
    void onSeparate() -> d
    void onPress(int) -> a
    void onRelease(int) -> b
    void updateRingerMode() -> s
    void loadSettings() -> t
    void setDictionariesForCurrentKeyboard() -> u
    java.lang.String getDictionaryOverrideKey(com.anysoftkeyboard.keyboards.AnyKeyboard) -> b
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void setInitialCondensedState(android.content.res.Configuration) -> a
    void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String) -> onSharedPreferenceChanged
    void deleteLastCharactersFromInput(int) -> c
    android.content.SharedPreferences getSharedPreferences() -> e
    void showToastMessage$2563266() -> f
    void showToastMessage$609c24db(java.lang.CharSequence) -> b
    void onLowMemory() -> onLowMemory
    void startInputConnectionEdit() -> g
    void endInputConnectionEdit() -> h
    void showQuickTextKeyPopupKeyboard(com.anysoftkeyboard.quicktextkeys.QuickTextKey) -> a
    void showQuickTextKeyPopupList(com.anysoftkeyboard.quicktextkeys.QuickTextKey) -> b
    void promoteToUserDictionary$505cff1c(java.lang.String) -> b
    com.anysoftkeyboard.WordComposer getCurrentWord() -> i
    boolean onEvaluateInputViewShown() -> onEvaluateInputViewShown
    void onCancel() -> j
    void resetKeyboardView(boolean) -> e
    void access$0(com.anysoftkeyboard.AnySoftKeyboard) -> a
    void access$1(com.anysoftkeyboard.AnySoftKeyboard) -> b
    void access$2$9d3ed9b(com.anysoftkeyboard.AnySoftKeyboard) -> c
    com.anysoftkeyboard.keyboards.views.CandidateView access$3(com.anysoftkeyboard.AnySoftKeyboard) -> d
    android.widget.TextView access$4(com.anysoftkeyboard.AnySoftKeyboard) -> e
    void access$5$9d429ab(com.anysoftkeyboard.AnySoftKeyboard) -> f
    int[] $SWITCH_TABLE$com$anysoftkeyboard$dictionaries$TextEntryState$State() -> v
    void access$7(com.anysoftkeyboard.AnySoftKeyboard,android.view.inputmethod.EditorInfo,com.anysoftkeyboard.keyboards.KeyboardSwitcher$NextKeyboardType,com.anysoftkeyboard.keyboards.AnyKeyboard) -> a
    void access$8$5bf0a0bf(com.anysoftkeyboard.AnySoftKeyboard,java.lang.CharSequence) -> a
    void access$9(com.anysoftkeyboard.AnySoftKeyboard) -> g
    void access$10(com.anysoftkeyboard.AnySoftKeyboard) -> h
    void access$11(com.anysoftkeyboard.AnySoftKeyboard) -> i
com.anysoftkeyboard.AnySoftKeyboard$1 -> com.anysoftkeyboard.j:
    com.anysoftkeyboard.AnySoftKeyboard this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.anysoftkeyboard.AnySoftKeyboard$2 -> com.anysoftkeyboard.i:
    com.anysoftkeyboard.AnySoftKeyboard this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.anysoftkeyboard.AnySoftKeyboard$3 -> com.anysoftkeyboard.n:
    com.anysoftkeyboard.AnySoftKeyboard this$0 -> a
    void attachToken(android.os.IBinder) -> attachToken
com.anysoftkeyboard.AnySoftKeyboard$4 -> com.anysoftkeyboard.m:
    long mFirstClickTime -> a
    com.anysoftkeyboard.AnySoftKeyboard this$0 -> b
    void onClick(android.view.View) -> onClick
com.anysoftkeyboard.AnySoftKeyboard$5 -> com.anysoftkeyboard.l:
    com.anysoftkeyboard.AnySoftKeyboard this$0 -> a
    java.lang.CharSequence[] val$items -> b
    java.lang.CharSequence[] val$ids -> c
    void onClick(android.content.DialogInterface,int) -> onClick
com.anysoftkeyboard.AnySoftKeyboard$6 -> com.anysoftkeyboard.k:
    com.anysoftkeyboard.AnySoftKeyboard this$0 -> a
    java.lang.String val$dictionaryOverridingKey -> b
    java.lang.CharSequence[] val$items -> c
    java.lang.CharSequence[] val$ids -> d
    void onClick(android.content.DialogInterface,int) -> onClick
com.anysoftkeyboard.AnySoftKeyboard$7 -> com.anysoftkeyboard.g:
    com.anysoftkeyboard.AnySoftKeyboard this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.anysoftkeyboard.AnySoftKeyboard$8 -> com.anysoftkeyboard.h:
    com.anysoftkeyboard.AnySoftKeyboard this$0 -> a
    com.anysoftkeyboard.quicktextkeys.QuickTextKey val$key -> b
    boolean setViewValue(android.view.View,java.lang.Object,java.lang.String) -> setViewValue
com.anysoftkeyboard.AnySoftKeyboard$9 -> com.anysoftkeyboard.f:
    com.anysoftkeyboard.AnySoftKeyboard this$0 -> a
    android.widget.SimpleAdapter val$a -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.anysoftkeyboard.ChewbaccaUncaughtExceptionHandler -> com.anysoftkeyboard.e:
    java.lang.Thread$UncaughtExceptionHandler mOsDefaultHandler -> a
    android.content.Context mApp -> b
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
    java.lang.String getStackTrace(java.lang.Throwable) -> a
com.anysoftkeyboard.Configuration -> com.anysoftkeyboard.a:
    java.lang.String getDomainText() -> a
    boolean getShowKeyPreview() -> b
    boolean getSwitchKeyboardOnSpace() -> c
    boolean getUseFullScreenInputInLandscape() -> d
    boolean getUseFullScreenInputInPortrait() -> e
    boolean getUseRepeatingKeys() -> f
    float getKeysHeightFactorInPortrait() -> g
    float getKeysHeightFactorInLandscape() -> h
    boolean getInsertSpaceAfterCandidatePick() -> i
    int getGestureSwipeUpKeyCode() -> j
    int getGestureSwipeUpFromSpacebarKeyCode() -> k
    int getGestureSwipeDownKeyCode() -> l
    int getGestureSwipeLeftKeyCode() -> m
    int getGestureSwipeRightKeyCode() -> n
    int getGesturePinchKeyCode() -> o
    int getGestureSeparateKeyCode() -> p
    boolean getActionKeyInvisibleWhenRequested() -> q
    boolean isDoubleSpaceChangesToPeriod() -> r
    boolean shouldShowPopupForLanguageSwitch() -> s
    boolean hideSoftKeyboardWhenPhysicalKeyPressed() -> t
    boolean getShowVersionNotification() -> u
    void setShowVersionNotification(boolean) -> a
    boolean use16KeysSymbolsKeyboards() -> v
    boolean useBackword() -> w
    boolean getCycleOverAllSymbols() -> x
    boolean useVolumeKeyForLeftRight() -> y
    boolean useCameraKeyForBackspaceBackword() -> z
    boolean useAutoDictionary() -> A
    boolean isStickyExtensionKeyboard() -> B
    int getSwipeVelocityThreshold() -> C
    int getSwipeDistanceThreshold() -> D
    int getLongPressTimeout() -> E
    int getMultiTapTimeout() -> F
    boolean workaround_alwaysUseDrawText() -> G
    java.lang.String getInitialKeyboardSplitState() -> H
com.anysoftkeyboard.ConfigurationImpl -> com.anysoftkeyboard.d:
    android.content.Context mContext -> a
    java.lang.String mDomainText -> b
    boolean mShowKeyPreview -> c
    boolean mSwitchKeyboardOnSpace -> d
    boolean mUseFullScreenInputInLandscape -> e
    boolean mUseFullScreenInputInPortrait -> f
    boolean mUseKeyRepeat -> g
    float mKeysHeightFactorInPortrait -> h
    float mKeysHeightFactorInLandscape -> i
    boolean mInsertSpaceAfterCandidatePick -> j
    int mSwipeDistanceThreshold -> k
    int mSwipeVelocityThreshold -> l
    int mSwipeUpKeyCode -> m
    int mSwipeUpFromSpacebarKeyCode -> n
    int mSwipeDownKeyCode -> o
    int mSwipeLeftKeyCode -> p
    int mSwipeRightKeyCode -> q
    int mPinchKeyCode -> r
    int mSeparateKeyCode -> s
    boolean mActionKeyInvisibleWhenRequested -> t
    boolean mIsDoubleSpaceChangesToPeroid -> u
    boolean mShouldPopupForLanguageSwitch -> v
    boolean mHideSoftKeyboardWhenPhysicalKeyPressed -> w
    boolean mShowVersionNotification -> x
    boolean mUse16KeysSymbolsKeyboard -> y
    boolean mUseBackword -> z
    boolean mCycleOverAllSymbolsKeyboard -> A
    boolean mUseVolumeKeyForLeftRight -> B
    boolean mUseCameraKeyForBackspaceBackword -> C
    boolean mUseContactsDictionary -> D
    boolean mUseAutoDictionary -> E
    boolean mIsStickyExtensionKeyboard -> F
    boolean mDrawExtensionKeyboardAboveMainKeyboard -> G
    int mLongPressTimeout -> H
    int mMultiTapTimeout -> I
    boolean mWorkaround_alwaysUseDrawText -> J
    java.lang.String mInitialKeyboardSplitState -> K
    void handleConfigurationChange(android.content.SharedPreferences) -> a
    int getIntFromSwipeConfiguration(android.content.SharedPreferences,java.lang.String,java.lang.String) -> a
    float getFloatFromString(android.content.SharedPreferences,java.lang.String,java.lang.String) -> b
    int getIntFromString(android.content.SharedPreferences,java.lang.String,java.lang.String) -> c
    java.lang.String getDomainText() -> a
    boolean getShowKeyPreview() -> b
    boolean getSwitchKeyboardOnSpace() -> c
    boolean getUseFullScreenInputInLandscape() -> d
    boolean getUseFullScreenInputInPortrait() -> e
    boolean getUseRepeatingKeys() -> f
    float getKeysHeightFactorInLandscape() -> h
    float getKeysHeightFactorInPortrait() -> g
    boolean getInsertSpaceAfterCandidatePick() -> i
    int getGestureSwipeUpKeyCode() -> j
    int getGestureSwipeDownKeyCode() -> l
    int getGestureSwipeLeftKeyCode() -> m
    int getGestureSwipeRightKeyCode() -> n
    int getGesturePinchKeyCode() -> o
    int getGestureSeparateKeyCode() -> p
    int getGestureSwipeUpFromSpacebarKeyCode() -> k
    boolean getActionKeyInvisibleWhenRequested() -> q
    boolean isDoubleSpaceChangesToPeriod() -> r
    boolean shouldShowPopupForLanguageSwitch() -> s
    boolean hideSoftKeyboardWhenPhysicalKeyPressed() -> t
    boolean getShowVersionNotification() -> u
    void setShowVersionNotification(boolean) -> a
    boolean use16KeysSymbolsKeyboards() -> v
    boolean useBackword() -> w
    boolean getCycleOverAllSymbols() -> x
    boolean useCameraKeyForBackspaceBackword() -> z
    boolean useVolumeKeyForLeftRight() -> y
    boolean useAutoDictionary() -> A
    boolean isStickyExtensionKeyboard() -> B
    int getSwipeDistanceThreshold() -> D
    int getSwipeVelocityThreshold() -> C
    int getLongPressTimeout() -> E
    int getMultiTapTimeout() -> F
    boolean workaround_alwaysUseDrawText() -> G
    java.lang.String getInitialKeyboardSplitState() -> H
com.anysoftkeyboard.WordComposer -> com.anysoftkeyboard.c:
    java.util.ArrayList mCodes -> a
    java.lang.String mPreferredWord -> b
    java.lang.StringBuilder mTypedWord -> c
    int mCapsCount -> d
    boolean mAutoCapitalized -> e
    boolean mIsFirstCharCapitalized -> f
    void reset() -> a
    int size() -> b
    int[] getCodesAt(int) -> a
    boolean add(int,int[]) -> a
    void deleteLast() -> c
    java.lang.CharSequence getTypedWord() -> d
    void setFirstCharCapitalized$1385ff() -> e
    boolean isFirstCharCapitalized() -> f
    boolean isAllUpperCase() -> g
    boolean isMostlyCaps() -> h
    boolean isAutoCapitalized() -> i
com.anysoftkeyboard.addons.AddOn -> com.anysoftkeyboard.e.c:
    java.lang.String getId() -> j
    java.lang.String getName() -> o
    android.content.Context getPackageContext() -> m
    int getSortIndex() -> n
com.anysoftkeyboard.addons.AddOnImpl -> com.anysoftkeyboard.e.a:
    java.lang.String mId -> a
    int mNameResId -> b
    java.lang.String mDescription -> c
    android.content.Context mPackageContext -> d
    int mSortIndex -> e
    java.lang.String getId() -> j
    int getNameResId() -> k
    java.lang.String getDescription() -> l
    android.content.Context getPackageContext() -> m
    int getSortIndex() -> n
    java.lang.String getName() -> o
com.anysoftkeyboard.addons.AddOnsFactory -> com.anysoftkeyboard.e.b:
    java.util.ArrayList mActiveInstances -> b
    java.lang.String TAG -> a
    java.lang.String RECEIVER_INTERFACE -> c
    java.lang.String RECEIVER_META_DATA -> d
    java.util.ArrayList mAddOns -> e
    java.util.HashMap mAddOnsById -> f
    boolean mReadExternalPacksToo -> g
    java.lang.String ROOT_NODE_TAG -> h
    java.lang.String ADDON_NODE_TAG -> i
    int mBuildInAddOnsResId -> j
    void onPackageChanged$14d1abce() -> c
    boolean isEventRequiresViewReset$14d1abca() -> b
    void clearAddOnList() -> a
    com.anysoftkeyboard.addons.AddOn getAddOnById(java.lang.String,android.content.Context) -> c
    java.util.ArrayList getAllAddOns(android.content.Context) -> d
    void loadAddOns(android.content.Context) -> e
    void buildOtherDataBasedOnNewAddOns(java.util.ArrayList) -> a
    java.util.ArrayList getExternalAddOns(android.content.Context) -> a
    java.util.ArrayList parseAddOnsFromXml(android.content.Context,org.xmlpull.v1.XmlPullParser) -> a
    com.anysoftkeyboard.addons.AddOn createConcreateAddOn(android.content.Context,java.lang.String,int,java.lang.String,int,android.util.AttributeSet) -> a
com.anysoftkeyboard.addons.AddOnsFactory$1 -> com.anysoftkeyboard.e.d:
    com.anysoftkeyboard.addons.AddOnsFactory this$0 -> a
    android.content.Context val$askContext -> b
    int compare(java.lang.Object,java.lang.Object) -> compare
com.anysoftkeyboard.api.InfoActivity -> com.anysoftkeyboard.api.InfoActivity:
com.anysoftkeyboard.api.LanguageChangeddBroadcastReceiver -> com.anysoftkeyboard.api.LanguageChangeddBroadcastReceiver:
com.anysoftkeyboard.api.LayoutChangedBroadcastReceiver -> com.anysoftkeyboard.api.LayoutChangedBroadcastReceiver:
com.anysoftkeyboard.backup.AnyBackupAgent -> com.anysoftkeyboard.backup.AnyBackupAgent:
    void onCreate() -> onCreate
com.anysoftkeyboard.backup.CloudBackupRequester -> com.anysoftkeyboard.backup.b:
    void notifyBackupManager() -> a
com.anysoftkeyboard.backup.CloudBackupRequesterApi8 -> com.anysoftkeyboard.backup.a:
    java.lang.String mPackageName -> a
    void notifyBackupManager() -> a
com.anysoftkeyboard.devicespecific.AskOnGestureListener -> com.anysoftkeyboard.devicespecific.d:
    boolean onPinch(float) -> a
    boolean onSeparate(float) -> b
com.anysoftkeyboard.devicespecific.AskV8GestureDetector -> com.anysoftkeyboard.devicespecific.k:
    android.view.ScaleGestureDetector mScaleGestureDetector -> a
    com.anysoftkeyboard.devicespecific.AskOnGestureListener mListener -> b
    boolean mScaleEventHandled -> c
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    com.anysoftkeyboard.devicespecific.AskOnGestureListener access$0(com.anysoftkeyboard.devicespecific.AskV8GestureDetector) -> a
    void access$1(com.anysoftkeyboard.devicespecific.AskV8GestureDetector,boolean) -> a
com.anysoftkeyboard.devicespecific.AskV8GestureDetector$1 -> com.anysoftkeyboard.devicespecific.f:
    com.anysoftkeyboard.devicespecific.AskV8GestureDetector this$0 -> a
    void onScaleEnd(android.view.ScaleGestureDetector) -> onScaleEnd
com.anysoftkeyboard.devicespecific.DeviceSpecific -> com.anysoftkeyboard.devicespecific.h:
    com.anysoftkeyboard.devicespecific.WMotionEvent createMotionEventWrapper(android.view.MotionEvent) -> a
    android.view.GestureDetector createGestureDetector(android.content.Context,com.anysoftkeyboard.devicespecific.AskOnGestureListener) -> a
    com.anysoftkeyboard.backup.CloudBackupRequester createCloudBackupRequester(java.lang.String) -> a
    com.anysoftkeyboard.dictionaries.DictionaryFactory createDictionaryFactory() -> b
    com.anysoftkeyboard.voice.VoiceInput createVoiceInput(android.inputmethodservice.InputMethodService) -> a
com.anysoftkeyboard.devicespecific.FactoryViewBase -> com.anysoftkeyboard.devicespecific.i:
    com.anysoftkeyboard.devicespecific.DeviceSpecific createDeviceSpecific() -> a
com.anysoftkeyboard.devicespecific.FactoryView_V11 -> com.anysoftkeyboard.devicespecific.FactoryView_V11:
    com.anysoftkeyboard.devicespecific.DeviceSpecific createDeviceSpecific() -> a
com.anysoftkeyboard.devicespecific.FactoryView_V11$DeviceSpecific_V11 -> com.anysoftkeyboard.devicespecific.c:
    java.lang.String getApiLevel() -> a
    com.anysoftkeyboard.voice.VoiceInput createVoiceInput(android.inputmethodservice.InputMethodService) -> a
com.anysoftkeyboard.devicespecific.FactoryView_V3 -> com.anysoftkeyboard.devicespecific.FactoryView_V3:
    com.anysoftkeyboard.devicespecific.DeviceSpecific createDeviceSpecific() -> a
com.anysoftkeyboard.devicespecific.FactoryView_V3$DeviceSpecific_V3 -> com.anysoftkeyboard.devicespecific.j:
    java.lang.String getApiLevel() -> a
    com.anysoftkeyboard.devicespecific.WMotionEvent createMotionEventWrapper(android.view.MotionEvent) -> a
    android.view.GestureDetector createGestureDetector(android.content.Context,com.anysoftkeyboard.devicespecific.AskOnGestureListener) -> a
    com.anysoftkeyboard.backup.CloudBackupRequester createCloudBackupRequester(java.lang.String) -> a
    com.anysoftkeyboard.dictionaries.DictionaryFactory createDictionaryFactory() -> b
    com.anysoftkeyboard.voice.VoiceInput createVoiceInput(android.inputmethodservice.InputMethodService) -> a
com.anysoftkeyboard.devicespecific.FactoryView_V3$DeviceSpecific_V3$1 -> com.anysoftkeyboard.devicespecific.b:
    com.anysoftkeyboard.devicespecific.FactoryView_V3$DeviceSpecific_V3 this$1 -> a
    android.content.Context val$appContext -> b
    void startVoiceRecognition(java.lang.String) -> a
    void onStartInputView() -> a
com.anysoftkeyboard.devicespecific.FactoryView_V5 -> com.anysoftkeyboard.devicespecific.FactoryView_V5:
    com.anysoftkeyboard.devicespecific.DeviceSpecific createDeviceSpecific() -> a
com.anysoftkeyboard.devicespecific.FactoryView_V5$DeviceSpecific_V5 -> com.anysoftkeyboard.devicespecific.g:
    java.lang.String getApiLevel() -> a
    com.anysoftkeyboard.devicespecific.WMotionEvent createMotionEventWrapper(android.view.MotionEvent) -> a
    com.anysoftkeyboard.dictionaries.DictionaryFactory createDictionaryFactory() -> b
com.anysoftkeyboard.devicespecific.FactoryView_V7 -> com.anysoftkeyboard.devicespecific.FactoryView_V7:
    com.anysoftkeyboard.devicespecific.DeviceSpecific createDeviceSpecific() -> a
com.anysoftkeyboard.devicespecific.FactoryView_V7$DeviceSpecific_V7 -> com.anysoftkeyboard.devicespecific.a:
    java.lang.String getApiLevel() -> a
com.anysoftkeyboard.devicespecific.FactoryView_V8 -> com.anysoftkeyboard.devicespecific.FactoryView_V8:
    com.anysoftkeyboard.devicespecific.DeviceSpecific createDeviceSpecific() -> a
com.anysoftkeyboard.devicespecific.FactoryView_V8$DeviceSpecific_V8 -> com.anysoftkeyboard.devicespecific.e:
    java.lang.String getApiLevel() -> a
    com.anysoftkeyboard.devicespecific.WMotionEvent createMotionEventWrapper(android.view.MotionEvent) -> a
    android.view.GestureDetector createGestureDetector(android.content.Context,com.anysoftkeyboard.devicespecific.AskOnGestureListener) -> a
    com.anysoftkeyboard.backup.CloudBackupRequester createCloudBackupRequester(java.lang.String) -> a
    com.anysoftkeyboard.voice.VoiceInput createVoiceInput(android.inputmethodservice.InputMethodService) -> a
com.anysoftkeyboard.devicespecific.WMotionEvent -> com.anysoftkeyboard.devicespecific.m:
    android.view.MotionEvent mNativeMotionEvent -> a
    android.view.MotionEvent getNativeMotionEvent() -> c
    int getActionMasked() -> a
    int getPointerCount() -> d
    long getEventTime() -> e
    int getActionIndex() -> b
    int getPointerId(int) -> a
    float getX(int) -> b
    float getY(int) -> c
    int findPointerIndex(int) -> d
com.anysoftkeyboard.devicespecific.WMotionEventV5 -> com.anysoftkeyboard.devicespecific.n:
    int getActionMasked() -> a
    int getPointerCount() -> d
    int getActionIndex() -> b
    int getPointerId(int) -> a
    float getX(int) -> b
    float getY(int) -> c
    int findPointerIndex(int) -> d
com.anysoftkeyboard.devicespecific.WMotionEventV8 -> com.anysoftkeyboard.devicespecific.l:
    int getActionMasked() -> a
    int getActionIndex() -> b
com.anysoftkeyboard.dictionaries.AddableDictionary -> com.anysoftkeyboard.dictionaries.c:
    void addWord(java.lang.String,int) -> a
com.anysoftkeyboard.dictionaries.AndroidUserDictionary -> com.anysoftkeyboard.dictionaries.y:
    java.lang.String[] PROJECTION -> c
    android.database.ContentObserver mObserver -> d
    java.lang.String mLocale -> e
    void closeAllResources() -> c
    void loadDictionary() -> a
    void loadDictionaryAsync() -> d
    void addWords(android.database.Cursor) -> a
    void AddWordToStorage(java.lang.String,int) -> b
com.anysoftkeyboard.dictionaries.AndroidUserDictionary$1 -> com.anysoftkeyboard.dictionaries.f:
    com.anysoftkeyboard.dictionaries.AndroidUserDictionary this$0 -> a
    void onChange(boolean) -> onChange
com.anysoftkeyboard.dictionaries.AutoDictionary -> com.anysoftkeyboard.dictionaries.z:
    com.anysoftkeyboard.AnySoftKeyboard mIme -> c
    java.lang.String mLocale -> d
    java.util.HashMap mPendingWrites -> e
    java.lang.Object mPendingWritesLock -> f
    java.util.HashMap sDictProjectionMap -> g
    com.anysoftkeyboard.dictionaries.AutoDictionary$DatabaseHelper msOpenHelper -> h
    boolean isValidWord(java.lang.CharSequence) -> a
    void close() -> b
    void loadDictionaryAsync() -> d
    void addWord(java.lang.String,int) -> a
    void flushPendingWrites() -> e
    android.database.Cursor query(java.lang.String,java.lang.String[]) -> a
    java.lang.String getLocale() -> f
    void closeAllResources() -> c
    void AddWordToStorage(java.lang.String,int) -> b
com.anysoftkeyboard.dictionaries.AutoDictionary$DatabaseHelper -> com.anysoftkeyboard.dictionaries.r:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.anysoftkeyboard.dictionaries.AutoDictionary$UpdateDbTask -> com.anysoftkeyboard.dictionaries.o:
    java.util.HashMap mMap -> a
    com.anysoftkeyboard.dictionaries.AutoDictionary$DatabaseHelper mDbHelper -> b
    java.lang.String mLocale -> c
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.anysoftkeyboard.dictionaries.AutoText -> com.anysoftkeyboard.dictionaries.j:
    char[] mTrie -> a
    char mTrieUsed -> b
    java.lang.String mText -> c
    int mSize -> d
    java.lang.String lookup$2177fe87(java.lang.CharSequence,int) -> a
    void add(java.lang.String,char) -> a
com.anysoftkeyboard.dictionaries.BinaryDictionary -> com.anysoftkeyboard.dictionaries.BinaryDictionary:
    android.content.res.AssetFileDescriptor mAfd -> a
    int mNativeDict -> b
    int[] mInputCodes -> c
    char[] mOutputChars -> d
    int[] mFrequencies -> e
    void loadDictionary() -> a
    int openNative(java.io.FileDescriptor,long,long,int,int) -> openNative
    void closeNative(int) -> closeNative
    boolean isValidWordNative(int,char[],int) -> isValidWordNative
    int getSuggestionsNative(int,int[],int,char[],int[],int,int,int,int) -> getSuggestionsNative
    void getWords(com.anysoftkeyboard.WordComposer,com.anysoftkeyboard.dictionaries.Dictionary$WordCallback) -> a
    boolean isValidWord(java.lang.CharSequence) -> a
    void close() -> b
    void finalize() -> finalize
    android.content.res.AssetFileDescriptor access$0(com.anysoftkeyboard.dictionaries.BinaryDictionary) -> a
    void access$1(com.anysoftkeyboard.dictionaries.BinaryDictionary,android.content.res.AssetFileDescriptor) -> a
com.anysoftkeyboard.dictionaries.BinaryDictionary$LoadDictionaryTask -> com.anysoftkeyboard.dictionaries.ac:
    com.anysoftkeyboard.dictionaries.BinaryDictionary this$0 -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.anysoftkeyboard.dictionaries.Dictionary -> com.anysoftkeyboard.dictionaries.t:
    java.lang.String mDictionaryName -> a
    void getWords(com.anysoftkeyboard.WordComposer,com.anysoftkeyboard.dictionaries.Dictionary$WordCallback) -> a
    boolean isValidWord(java.lang.CharSequence) -> a
    void close() -> b
    void loadDictionary() -> a
com.anysoftkeyboard.dictionaries.Dictionary$WordCallback -> com.anysoftkeyboard.dictionaries.q:
    boolean addWord(char[],int,int,int) -> a
com.anysoftkeyboard.dictionaries.DictionaryAddOnAndBuilder -> com.anysoftkeyboard.dictionaries.u:
    java.lang.String mLanguage -> a
    java.lang.String mAssetsFilename -> b
    int mDictionaryResId -> c
    int mAutoTextResId -> d
    java.lang.String getLanguage() -> a
    com.anysoftkeyboard.dictionaries.Dictionary createDictionary() -> b
    com.anysoftkeyboard.dictionaries.AutoText createAutoText() -> c
com.anysoftkeyboard.dictionaries.DictionaryFactory -> com.anysoftkeyboard.dictionaries.ab:
    com.anysoftkeyboard.dictionaries.DictionaryFactory msFactory -> a
    com.anysoftkeyboard.dictionaries.AutoDictionary mAutoDictionary -> b
    java.lang.String mUserDictionaryLocale -> c
    com.anysoftkeyboard.dictionaries.AddableDictionary mUserDictionary -> d
    com.anysoftkeyboard.dictionaries.DictionaryFactory getInstance() -> a
    com.anysoftkeyboard.dictionaries.AddableDictionary createUserDictionary(com.anysoftkeyboard.AnyKeyboardContextProvider,java.lang.String) -> a
    boolean equalsString(java.lang.String,java.lang.String) -> a
    com.anysoftkeyboard.dictionaries.AutoDictionary createAutoDictionary(com.anysoftkeyboard.AnyKeyboardContextProvider,com.anysoftkeyboard.AnySoftKeyboard,java.lang.String) -> a
com.anysoftkeyboard.dictionaries.DictionaryFactoryAPI5 -> com.anysoftkeyboard.dictionaries.v:
com.anysoftkeyboard.dictionaries.DictionarySQLiteConnection -> com.anysoftkeyboard.dictionaries.p:
    java.lang.String mTableName -> a
    java.lang.String mWordsColumnName -> b
    java.lang.String mFrequencyColumnName -> c
    android.content.Context mContext -> d
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    void addWord(java.lang.String,int) -> a
    java.util.List getAllWords() -> a
com.anysoftkeyboard.dictionaries.DictionarySQLiteConnection$DictionaryWord -> com.anysoftkeyboard.dictionaries.w:
    java.lang.String mWord -> a
    int mFrequency -> b
    java.lang.String getWord() -> a
    int getFrequency() -> b
com.anysoftkeyboard.dictionaries.ExternalDictionaryFactory -> com.anysoftkeyboard.dictionaries.d:
    com.anysoftkeyboard.dictionaries.ExternalDictionaryFactory msInstance -> b
    java.util.HashMap mBuildersByLocale -> c
    java.util.ArrayList getAllAvailableExternalDictionaries(android.content.Context) -> a
    com.anysoftkeyboard.dictionaries.DictionaryAddOnAndBuilder getDictionaryBuilderById(java.lang.String,android.content.Context) -> a
    com.anysoftkeyboard.dictionaries.DictionaryAddOnAndBuilder getDictionaryBuilderByLocale(java.lang.String,android.content.Context) -> b
    void clearAddOnList() -> a
    void buildOtherDataBasedOnNewAddOns(java.util.ArrayList) -> a
    com.anysoftkeyboard.dictionaries.DictionaryAddOnAndBuilder getAddOnByLocale(java.lang.String,android.content.Context) -> d
    com.anysoftkeyboard.addons.AddOn createConcreateAddOn(android.content.Context,java.lang.String,int,java.lang.String,int,android.util.AttributeSet) -> a
com.anysoftkeyboard.dictionaries.FallbackUserDictionary -> com.anysoftkeyboard.dictionaries.aa:
    com.anysoftkeyboard.dictionaries.DictionarySQLiteConnection createStorage() -> e
    void loadDictionary() -> a
com.anysoftkeyboard.dictionaries.FallbackUserDictionary$FallBackSQLite -> com.anysoftkeyboard.dictionaries.i:
com.anysoftkeyboard.dictionaries.ResourceBinaryDictionary -> com.anysoftkeyboard.dictionaries.ResourceBinaryDictionary:
    int mNativeDict -> a
    int mDictLength -> b
    int[] mInputCodes -> c
    char[] mOutputChars -> d
    char[] mOutputChars_bigrams -> e
    int[] mFrequencies -> f
    android.content.Context mAppContext -> g
    int mDictResId -> h
    java.nio.ByteBuffer mNativeDictDirectBuffer -> i
    int openNative(java.nio.ByteBuffer,int,int) -> openNative
    void closeNative(int) -> closeNative
    boolean isValidWordNative(int,char[],int) -> isValidWordNative
    int getSuggestionsNative(int,int[],int,char[],int[],int,int,int,int,int[],int) -> getSuggestionsNative
    void loadDictionary() -> a
    void getWords(com.anysoftkeyboard.WordComposer,com.anysoftkeyboard.dictionaries.Dictionary$WordCallback) -> a
    boolean isValidWord(java.lang.CharSequence) -> a
    void close() -> b
    void finalize() -> finalize
    android.content.Context access$0(com.anysoftkeyboard.dictionaries.ResourceBinaryDictionary) -> a
    int access$1(com.anysoftkeyboard.dictionaries.ResourceBinaryDictionary) -> b
    void access$2(com.anysoftkeyboard.dictionaries.ResourceBinaryDictionary,android.content.Context,int[]) -> a
com.anysoftkeyboard.dictionaries.ResourceBinaryDictionary$LoadDictionaryTask -> com.anysoftkeyboard.dictionaries.b:
    com.anysoftkeyboard.dictionaries.ResourceBinaryDictionary this$0 -> a
    java.lang.Void doInBackground$10299ca() -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.anysoftkeyboard.dictionaries.SQLiteUserDictionaryBase -> com.anysoftkeyboard.dictionaries.k:
    com.anysoftkeyboard.dictionaries.DictionarySQLiteConnection mStorage -> c
    void loadDictionaryAsync() -> d
    com.anysoftkeyboard.dictionaries.DictionarySQLiteConnection createStorage() -> e
    void AddWordToStorage(java.lang.String,int) -> b
    void closeAllResources() -> c
com.anysoftkeyboard.dictionaries.SafeUserDictionary -> com.anysoftkeyboard.dictionaries.s:
    com.anysoftkeyboard.AnyKeyboardContextProvider mAnyContext -> a
    com.anysoftkeyboard.dictionaries.UserDictionaryBase mActualDictionary -> b
    java.lang.Object mUpdatingLock -> c
    boolean mUpdatingDictionary -> d
    java.lang.String mLocale -> e
    void getWords(com.anysoftkeyboard.WordComposer,com.anysoftkeyboard.dictionaries.Dictionary$WordCallback) -> a
    boolean isValidWord(java.lang.CharSequence) -> a
    void close() -> b
    void loadDictionary() -> a
    void addWord(java.lang.String,int) -> a
    void access$0(com.anysoftkeyboard.dictionaries.SafeUserDictionary) -> a
    java.lang.Object access$1(com.anysoftkeyboard.dictionaries.SafeUserDictionary) -> b
    void access$2$33a3af(com.anysoftkeyboard.dictionaries.SafeUserDictionary) -> c
com.anysoftkeyboard.dictionaries.SafeUserDictionary$LoadDictionaryTask -> com.anysoftkeyboard.dictionaries.e:
    com.anysoftkeyboard.dictionaries.SafeUserDictionary this$0 -> a
    java.lang.Void doInBackground$10299ca() -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.anysoftkeyboard.dictionaries.Suggest -> com.anysoftkeyboard.dictionaries.m:
    com.anysoftkeyboard.dictionaries.Dictionary mMainDict -> a
    com.anysoftkeyboard.dictionaries.AutoText mAutoText -> b
    com.anysoftkeyboard.dictionaries.Dictionary mUserDictionary -> c
    com.anysoftkeyboard.dictionaries.Dictionary mAutoDictionary -> d
    com.anysoftkeyboard.dictionaries.Dictionary mContactsDictionary -> e
    int mPrefMaxSuggestions -> f
    int[] mPriorities -> g
    java.util.List mSuggestions -> h
    java.util.List mStringPool -> i
    boolean mHaveCorrection -> j
    java.lang.CharSequence mOriginalWord -> k
    java.lang.String mLowerOriginalWord -> l
    boolean mIsFirstCharCapitalized -> m
    boolean mIsAllUpperCase -> n
    boolean mAutoTextEnabled -> o
    boolean mMainDictioanryEnabled -> p
    void setCorrectionMode(boolean,boolean) -> a
    void setUserDictionary(com.anysoftkeyboard.dictionaries.Dictionary) -> a
    void setMainDictionary(com.anysoftkeyboard.dictionaries.DictionaryAddOnAndBuilder) -> a
    void setAutoDictionary(com.anysoftkeyboard.dictionaries.Dictionary) -> b
    boolean haveSufficientCommonality(java.lang.String,java.lang.CharSequence) -> a
    java.util.List getSuggestions$49eadccd(com.anysoftkeyboard.WordComposer) -> a
    boolean hasMinimalCorrection() -> a
    boolean addWord(char[],int,int,int) -> a
    boolean isValidWord(java.lang.CharSequence) -> a
com.anysoftkeyboard.dictionaries.TextEntryState -> com.anysoftkeyboard.dictionaries.l:
    boolean LOGGING -> a
    int sBackspaceCount -> b
    int sAutoSuggestCount -> c
    int sAutoSuggestUndoneCount -> d
    int sManualSuggestCount -> e
    int sWordNotInDictionaryCount -> f
    int sSessionCount -> g
    int sTypedChars -> h
    int sActualChars -> i
    com.anysoftkeyboard.dictionaries.TextEntryState$State sState -> j
    java.io.FileOutputStream sKeyLocationFile -> k
    java.io.FileOutputStream sUserActionFile -> l
    int[] $SWITCH_TABLE$com$anysoftkeyboard$dictionaries$TextEntryState$State -> m
    void newSession(android.content.Context) -> a
    void endSession() -> a
    void acceptedDefault(java.lang.CharSequence,java.lang.CharSequence) -> a
    void acceptedTyped$76bab119() -> b
    void acceptedSuggestion(java.lang.CharSequence,java.lang.CharSequence) -> b
    void typedCharacter(char,boolean) -> a
    void backspace() -> c
    void reset() -> d
    com.anysoftkeyboard.dictionaries.TextEntryState$State getState() -> e
    boolean isCorrecting() -> f
    int[] $SWITCH_TABLE$com$anysoftkeyboard$dictionaries$TextEntryState$State() -> g
com.anysoftkeyboard.dictionaries.TextEntryState$State -> com.anysoftkeyboard.dictionaries.a:
    com.anysoftkeyboard.dictionaries.TextEntryState$State UNKNOWN -> a
    com.anysoftkeyboard.dictionaries.TextEntryState$State START -> b
    com.anysoftkeyboard.dictionaries.TextEntryState$State IN_WORD -> c
    com.anysoftkeyboard.dictionaries.TextEntryState$State ACCEPTED_DEFAULT -> d
    com.anysoftkeyboard.dictionaries.TextEntryState$State PICKED_SUGGESTION -> e
    com.anysoftkeyboard.dictionaries.TextEntryState$State PUNCTUATION_AFTER_WORD -> f
    com.anysoftkeyboard.dictionaries.TextEntryState$State PUNCTUATION_AFTER_ACCEPTED -> g
    com.anysoftkeyboard.dictionaries.TextEntryState$State SPACE_AFTER_ACCEPTED -> h
    com.anysoftkeyboard.dictionaries.TextEntryState$State SPACE_AFTER_PICKED -> i
    com.anysoftkeyboard.dictionaries.TextEntryState$State UNDO_COMMIT -> j
    com.anysoftkeyboard.dictionaries.TextEntryState$State CORRECTING -> k
    com.anysoftkeyboard.dictionaries.TextEntryState$State PICKED_CORRECTION -> l
    com.anysoftkeyboard.dictionaries.TextEntryState$State[] ENUM$VALUES -> m
    com.anysoftkeyboard.dictionaries.TextEntryState$State[] values() -> values
    com.anysoftkeyboard.dictionaries.TextEntryState$State valueOf(java.lang.String) -> valueOf
com.anysoftkeyboard.dictionaries.UserDictionaryBase -> com.anysoftkeyboard.dictionaries.g:
    com.anysoftkeyboard.AnyKeyboardContextProvider mAnyContext -> c
    android.content.Context mContext -> a
    com.anysoftkeyboard.dictionaries.UserDictionaryBase$NodeArray mRoots -> d
    int mMaxDepth -> e
    int mInputLength -> f
    char[] mWordBuilder -> g
    boolean mUpdatingDictionary -> h
    java.lang.Object mUpdatingLock -> i
    boolean mRequiresReload -> b
    char[] BASE_CHARS -> j
    void close() -> b
    void closeAllResources() -> c
    void loadDictionary() -> a
    void loadDictionaryAsync() -> d
    void addWord(java.lang.String,int) -> a
    void AddWordToStorage(java.lang.String,int) -> b
    void getWords(com.anysoftkeyboard.WordComposer,com.anysoftkeyboard.dictionaries.Dictionary$WordCallback) -> a
    boolean isValidWord(java.lang.CharSequence) -> a
    boolean isValidWordRec(com.anysoftkeyboard.dictionaries.UserDictionaryBase$NodeArray,java.lang.CharSequence,int,int) -> a
    char toLowerCase(char) -> a
    void getWordsRec(com.anysoftkeyboard.dictionaries.UserDictionaryBase$NodeArray,com.anysoftkeyboard.WordComposer,char[],int,boolean,float,int,com.anysoftkeyboard.dictionaries.Dictionary$WordCallback) -> a
    void addWordFromStorage(java.lang.String,int) -> c
    void addWordRec(com.anysoftkeyboard.dictionaries.UserDictionaryBase$NodeArray,java.lang.String,int,int) -> a
    int getWordFrequency(java.lang.CharSequence) -> b
    int getWordFrequencyRec(com.anysoftkeyboard.dictionaries.UserDictionaryBase$NodeArray,java.lang.CharSequence,int,int) -> b
    java.lang.Object access$0(com.anysoftkeyboard.dictionaries.UserDictionaryBase) -> a
    void access$1$40d05bd5(com.anysoftkeyboard.dictionaries.UserDictionaryBase) -> b
com.anysoftkeyboard.dictionaries.UserDictionaryBase$LoadDictionaryTask -> com.anysoftkeyboard.dictionaries.h:
    com.anysoftkeyboard.dictionaries.UserDictionaryBase this$0 -> a
    java.lang.Void doInBackground$10299ca() -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.anysoftkeyboard.dictionaries.UserDictionaryBase$Node -> com.anysoftkeyboard.dictionaries.x:
    char code -> a
    int frequency -> b
    boolean terminal -> c
    com.anysoftkeyboard.dictionaries.UserDictionaryBase$NodeArray children -> d
com.anysoftkeyboard.dictionaries.UserDictionaryBase$NodeArray -> com.anysoftkeyboard.dictionaries.n:
    com.anysoftkeyboard.dictionaries.UserDictionaryBase$Node[] data -> a
    int length -> b
com.anysoftkeyboard.keyboardextensions.KeyboardExtension -> com.anysoftkeyboard.c.a:
    int mKeyboardResId -> a
    int mExtensionType -> b
    int getKeyboardResId() -> a
    int getExtensionType() -> b
com.anysoftkeyboard.keyboardextensions.KeyboardExtensionFactory -> com.anysoftkeyboard.c.b:
    com.anysoftkeyboard.keyboardextensions.KeyboardExtensionFactory msInstance -> b
    com.anysoftkeyboard.keyboardextensions.KeyboardExtension getCurrentKeyboardExtension(com.anysoftkeyboard.AnyKeyboardContextProvider,int) -> a
    java.util.ArrayList getAllAvailableExtensions(android.content.Context,int) -> a
    boolean isEventRequiresViewReset$14d1abca() -> b
    com.anysoftkeyboard.addons.AddOn createConcreateAddOn(android.content.Context,java.lang.String,int,java.lang.String,int,android.util.AttributeSet) -> a
com.anysoftkeyboard.keyboards.AnyKeyboard -> com.anysoftkeyboard.keyboards.f:
    int mShiftState -> d
    int mControlState -> e
    com.anysoftkeyboard.keyboards.Keyboard$Key mShiftKey -> f
    com.anysoftkeyboard.keyboards.Keyboard$Key mControlKey -> g
    com.anysoftkeyboard.keyboards.AnyKeyboard$EnterKey mEnterKey -> h
    boolean mRightToLeftLayout -> i
    boolean mTopRowWasCreated -> j
    boolean mBottomRowWasCreated -> k
    int mGenericRowsHeight -> l
    int mTopRowKeysCount -> m
    int mMaxGenericRowsWidth -> n
    com.anysoftkeyboard.keyboards.KeyboardCondensor mKeyboardCondensor -> o
    int mKeyboardActionType -> p
    void loadKeyboard(com.anysoftkeyboard.keyboards.KeyboardDimens) -> a
    void addGenericRows$43d5def5(int,com.anysoftkeyboard.keyboards.KeyboardDimens) -> a
    void fixKeyboardDueToGenericRow(com.anysoftkeyboard.keyboards.AnyKeyboard$KeyboardMetadata,int) -> a
    com.anysoftkeyboard.keyboards.AnyKeyboard$KeyboardMetadata addKeyboardRow(android.content.Context,int,int,com.anysoftkeyboard.keyboards.KeyboardDimens) -> a
    int getHeight() -> c
    int getMinWidth() -> d
    com.anysoftkeyboard.AnyKeyboardContextProvider getASKContext() -> g
    android.content.Context getKeyboardContext() -> h
    java.lang.String getDefaultDictionaryLocale() -> i
    com.anysoftkeyboard.keyboards.Keyboard$Key createKeyFromXml(com.anysoftkeyboard.AnyKeyboardContextProvider,android.content.res.Resources,com.anysoftkeyboard.keyboards.Keyboard$Row,com.anysoftkeyboard.keyboards.KeyboardDimens,int,int,android.content.res.XmlResourceParser) -> a
    com.anysoftkeyboard.keyboards.Keyboard$Row createRowFromXml(com.anysoftkeyboard.AnyKeyboardContextProvider,android.content.res.Resources,android.content.res.XmlResourceParser) -> a
    boolean isInnerWordLetter(char) -> a
    java.util.HashSet getSentenceSeparators() -> j
    void setImeOptions(android.content.res.Resources,android.view.inputmethod.EditorInfo) -> a
    int getKeyboardNameResId() -> k
    java.lang.String getKeyboardName() -> l
    boolean isLeftToRightLanguage() -> m
    int getKeyboardIconResId() -> n
    void setShiftLocked(boolean) -> b
    boolean isShifted() -> e
    boolean setShifted(boolean) -> a
    void setShiftViewAsState() -> u
    boolean isShiftLocked() -> o
    boolean isControl() -> p
    boolean setControl(boolean) -> c
    boolean isControlLocked() -> q
    void setPopupKeyChars(com.anysoftkeyboard.keyboards.Keyboard$Key) -> a
    int getKeyboardActionType() -> r
    java.lang.String getKeyboardPrefId() -> s
    int getKeyboardMode() -> t
    void setCondensedKeys(boolean) -> d
com.anysoftkeyboard.keyboards.AnyKeyboard$AnyKey -> com.anysoftkeyboard.keyboards.k:
    int[] KEY_STATE_FUNCTIONAL_NORMAL -> u
    int[] KEY_STATE_FUNCTIONAL_PRESSED -> v
    int[] shiftedCodes -> w
    int longPressCode -> t
    boolean mFunctionalKey -> x
    boolean mEnabled -> y
    void enable() -> d
    void disable() -> e
    boolean isInside(int,int) -> a
    void setAsFunctional() -> f
    int[] getCurrentDrawableState() -> c
com.anysoftkeyboard.keyboards.AnyKeyboard$EnterKey -> com.anysoftkeyboard.keyboards.r:
    int[] KEY_STATE_ACTION_NORMAL -> u
    int[] KEY_STATE_ACTION_PRESSED -> v
    int mOriginalHeight -> w
    void disable() -> e
    void enable() -> d
    int[] getCurrentDrawableState() -> c
com.anysoftkeyboard.keyboards.AnyKeyboard$HardKeyboardAction -> com.anysoftkeyboard.keyboards.l:
    int getKeyCode() -> a
    boolean isAltActive() -> b
    boolean isShiftActive() -> c
    void setNewKeyCode(int) -> a
com.anysoftkeyboard.keyboards.AnyKeyboard$HardKeyboardTranslator -> com.anysoftkeyboard.keyboards.h:
    void translatePhysicalCharacter(com.anysoftkeyboard.keyboards.AnyKeyboard$HardKeyboardAction) -> a
com.anysoftkeyboard.keyboards.AnyKeyboard$KeyboardMetadata -> com.anysoftkeyboard.keyboards.i:
    int keysCount -> a
    int rowHeight -> b
    int rowWidth -> c
    int verticalGap -> d
    boolean isTopRow -> e
com.anysoftkeyboard.keyboards.AnyPopupKeyboard -> com.anysoftkeyboard.keyboards.o:
    int mAdditionalWidth -> d
    boolean mOneKeyPressPopup -> e
    java.util.HashSet getSentenceSeparators() -> j
    int getMinWidth() -> d
    java.lang.String getDefaultDictionaryLocale() -> i
    int getKeyboardNameResId() -> k
    int getKeyboardIconResId() -> n
    java.lang.String getKeyboardPrefId() -> s
    boolean isOneKeyEventPopup() -> u
    void setIsOneKeyEventPopup(boolean) -> e
    void addGenericRows$43d5def5(int,com.anysoftkeyboard.keyboards.KeyboardDimens) -> a
com.anysoftkeyboard.keyboards.ExternalAnyKeyboard -> com.anysoftkeyboard.keyboards.x:
    java.lang.String mPrefId -> d
    int mNameResId -> e
    int mIconId -> f
    java.lang.String mDefaultDictionary -> g
    com.anysoftkeyboard.keyboards.HardKeyboardSequenceHandler mHardKeyboardTranslator -> h
    java.util.HashSet mAdditionalIsLetterExceptions -> i
    java.util.HashSet mSentenceSeparators -> j
    com.anysoftkeyboard.keyboardextensions.KeyboardExtension mExtensionLayout -> k
    void setExtensionLayout$1ba72e20() -> v
    com.anysoftkeyboard.keyboardextensions.KeyboardExtension getExtensionLayout() -> w
    com.anysoftkeyboard.keyboards.HardKeyboardSequenceHandler createPhysicalTranslatorFromResourceId(android.content.Context,int) -> a
    int[] getKeyCodesFromPhysicalSequence(java.lang.String) -> a
    java.lang.String getDefaultDictionaryLocale() -> i
    java.lang.String getKeyboardPrefId() -> s
    int getKeyboardIconResId() -> n
    int getKeyboardNameResId() -> k
    void translatePhysicalCharacter(com.anysoftkeyboard.keyboards.AnyKeyboard$HardKeyboardAction) -> a
    boolean isInnerWordLetter(char) -> a
    java.util.HashSet getSentenceSeparators() -> j
    void setPopupKeyChars(com.anysoftkeyboard.keyboards.Keyboard$Key) -> a
com.anysoftkeyboard.keyboards.GenericKeyboard -> com.anysoftkeyboard.keyboards.w:
    boolean mDisableKeyPreviews -> d
    boolean disableKeyPreviews() -> u
com.anysoftkeyboard.keyboards.HardKeyboardSequenceHandler -> com.anysoftkeyboard.keyboards.u:
    int[] msQwerty -> a
    long mLastTypedKeyEventTime -> b
    com.anysoftkeyboard.keyboards.KeyEventStateMachine mCurrentSequence -> c
    void addQwertyTranslation(java.lang.String) -> a
    void addSequence(int[],int) -> a
    void addShiftSequence(int[],int) -> b
    void addAltSequence(int[],int) -> c
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$State addNewKey(int) -> b
    boolean addSpecialKey(int) -> a
    int getCurrentCharacter(int,com.anysoftkeyboard.AnyKeyboardContextProvider) -> a
com.anysoftkeyboard.keyboards.KeyEventStateMachine -> com.anysoftkeyboard.keyboards.z:
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$KeyEventState start -> a
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$RingBuffer walker -> b
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$RingBuffer walkerhelper -> c
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$RingBuffer walkerunused -> d
    int sequenceLength -> e
    int resultChar -> f
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$KeyEventState addNextState(com.anysoftkeyboard.keyboards.KeyEventStateMachine$KeyEventState,int) -> a
    void addSequence(int[],int) -> a
    void addSpecialKeySequence(int[],int,int) -> a
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$State addKeyCode(int) -> a
    int getCharacter() -> a
    int getSequenceLength() -> b
    void reset() -> c
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$KeyEventState access$0(com.anysoftkeyboard.keyboards.KeyEventStateMachine) -> a
com.anysoftkeyboard.keyboards.KeyEventStateMachine$KeyEventState -> com.anysoftkeyboard.keyboards.v:
    java.util.LinkedList transitions -> a
    int result -> b
    com.anysoftkeyboard.keyboards.KeyEventStateMachine this$0 -> c
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$KeyEventState getNext(int) -> a
    void addNextState(int,com.anysoftkeyboard.keyboards.KeyEventStateMachine$KeyEventState) -> a
    void setCharacter(int) -> b
    boolean hasNext() -> a
    int access$0(com.anysoftkeyboard.keyboards.KeyEventStateMachine$KeyEventState) -> a
com.anysoftkeyboard.keyboards.KeyEventStateMachine$KeyEventTransition -> com.anysoftkeyboard.keyboards.b:
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$KeyEventState next -> a
    int keyCode -> b
    com.anysoftkeyboard.keyboards.KeyEventStateMachine this$0 -> c
    int access$0(com.anysoftkeyboard.keyboards.KeyEventStateMachine$KeyEventTransition) -> a
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$KeyEventState access$1(com.anysoftkeyboard.keyboards.KeyEventStateMachine$KeyEventTransition) -> b
com.anysoftkeyboard.keyboards.KeyEventStateMachine$NFAPart -> com.anysoftkeyboard.keyboards.q:
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$KeyEventState state -> a
    int iVisibleSequenceLength -> b
    int iSequenceLength -> c
    int resultChar -> d
    int sequenceLength -> e
    int visibleSequenceLength -> f
    com.anysoftkeyboard.keyboards.KeyEventStateMachine this$0 -> g
    void reset() -> a
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$State access$0(com.anysoftkeyboard.keyboards.KeyEventStateMachine$NFAPart,int) -> a
    void access$1(com.anysoftkeyboard.keyboards.KeyEventStateMachine$NFAPart,int) -> b
    int access$2(com.anysoftkeyboard.keyboards.KeyEventStateMachine$NFAPart) -> a
    int access$3(com.anysoftkeyboard.keyboards.KeyEventStateMachine$NFAPart) -> b
    int access$4(com.anysoftkeyboard.keyboards.KeyEventStateMachine$NFAPart) -> c
com.anysoftkeyboard.keyboards.KeyEventStateMachine$RingBuffer -> com.anysoftkeyboard.keyboards.c:
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$NFAPart[] buffer -> a
    int start -> b
    int end -> c
    int count -> d
    com.anysoftkeyboard.keyboards.KeyEventStateMachine this$0 -> e
    boolean $assertionsDisabled -> f
    boolean hasItem() -> a
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$NFAPart getItem() -> b
    void putItem(com.anysoftkeyboard.keyboards.KeyEventStateMachine$NFAPart) -> a
    int getCount() -> c
com.anysoftkeyboard.keyboards.KeyEventStateMachine$State -> com.anysoftkeyboard.keyboards.t:
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$State RESET -> a
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$State REWIND -> b
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$State NOMATCH -> c
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$State PARTMATCH -> d
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$State FULLMATCH -> e
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$State[] ENUM$VALUES -> f
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$State[] values() -> values
    com.anysoftkeyboard.keyboards.KeyEventStateMachine$State valueOf(java.lang.String) -> valueOf
com.anysoftkeyboard.keyboards.Keyboard -> com.anysoftkeyboard.keyboards.e:
    android.content.Context mKeyboardContext -> a
    com.anysoftkeyboard.AnyKeyboardContextProvider mASKContext -> b
    int mLayoutResId -> d
    int mDefaultHorizontalGap -> e
    int mDefaultWidth -> f
    int mDefaultHeightCode -> g
    int mDefaultVerticalGap -> h
    boolean mShifted -> i
    com.anysoftkeyboard.keyboards.Keyboard$Key mShiftKey -> j
    int mShiftKeyIndex -> k
    int mTotalHeight -> l
    int mTotalWidth -> m
    java.util.List mKeys -> n
    java.util.List mModifierKeys -> o
    int mDisplayWidth -> p
    int mKeyboardMode -> c
    int mCellWidth -> q
    int mCellHeight -> r
    int[][] mGridNeighbors -> s
    int mProximityThreshold -> t
    float SEARCH_DISTANCE -> u
    int getKeyHeightCode$35086326(android.content.res.TypedArray,int) -> a
    java.util.List getKeys() -> a
    int getVerticalGap() -> b
    int getHeight() -> c
    int getMinWidth() -> d
    boolean setShifted(boolean) -> a
    boolean isShifted() -> e
    void computeNearestNeighbors() -> f
    int[] getNearestKeys(int,int) -> a
    com.anysoftkeyboard.keyboards.Keyboard$Row createRowFromXml(com.anysoftkeyboard.AnyKeyboardContextProvider,android.content.res.Resources,android.content.res.XmlResourceParser) -> a
    com.anysoftkeyboard.keyboards.Keyboard$Key createKeyFromXml(com.anysoftkeyboard.AnyKeyboardContextProvider,android.content.res.Resources,com.anysoftkeyboard.keyboards.Keyboard$Row,com.anysoftkeyboard.keyboards.KeyboardDimens,int,int,android.content.res.XmlResourceParser) -> a
    void loadKeyboard(com.anysoftkeyboard.keyboards.KeyboardDimens) -> a
    int getDimensionOrFraction(android.content.res.TypedArray,int,int,int) -> a
    int access$0(com.anysoftkeyboard.keyboards.Keyboard) -> a
    int access$1(com.anysoftkeyboard.keyboards.Keyboard) -> b
    int access$2(com.anysoftkeyboard.keyboards.Keyboard) -> c
    int access$3(com.anysoftkeyboard.keyboards.Keyboard) -> d
com.anysoftkeyboard.keyboards.Keyboard$Key -> com.anysoftkeyboard.keyboards.a:
    int[] codes -> a
    java.lang.CharSequence label -> b
    android.graphics.drawable.Drawable icon -> c
    android.graphics.drawable.Drawable iconPreview -> d
    int width -> e
    int height -> f
    int gap -> g
    boolean sticky -> h
    int x -> i
    int y -> j
    boolean pressed -> k
    boolean on -> l
    java.lang.CharSequence text -> m
    java.lang.CharSequence popupCharacters -> n
    int edgeFlags -> o
    boolean modifier -> p
    com.anysoftkeyboard.keyboards.Keyboard keyboard -> t
    com.anysoftkeyboard.keyboards.Keyboard$Row row -> q
    int popupResId -> r
    boolean repeatable -> s
    int[] KEY_STATE_NORMAL_ON -> u
    int[] KEY_STATE_PRESSED_ON -> v
    int[] KEY_STATE_NORMAL_OFF -> w
    int[] KEY_STATE_PRESSED_OFF -> x
    int[] KEY_STATE_NORMAL -> y
    int[] KEY_STATE_PRESSED -> z
    void onPressed() -> a
    void onReleased$1385ff() -> b
    int[] parseCSV(java.lang.String) -> a
    boolean isInside(int,int) -> a
    int squaredDistanceFrom(int,int) -> b
    int[] getCurrentDrawableState() -> c
com.anysoftkeyboard.keyboards.Keyboard$Row -> com.anysoftkeyboard.keyboards.m:
    int defaultWidth -> a
    int defaultHeightCode -> b
    int defaultHorizontalGap -> c
    int verticalGap -> d
    int rowEdgeFlags -> e
    int mode -> f
    com.anysoftkeyboard.keyboards.Keyboard parent -> g
    com.anysoftkeyboard.keyboards.Keyboard access$0(com.anysoftkeyboard.keyboards.Keyboard$Row) -> a
com.anysoftkeyboard.keyboards.KeyboardAddOnAndBuilder -> com.anysoftkeyboard.keyboards.y:
    int mResId -> a
    int mLandscapeResId -> b
    int mIconResId -> c
    java.lang.String mDefaultDictionary -> d
    int mQwertyTranslationId -> e
    java.lang.String mAdditionalIsLetterExceptions -> f
    java.lang.String mSentenceSeparators -> g
    boolean mKeyboardDefaultEnabled -> h
    boolean getKeyboardDefaultEnabled() -> a
    com.anysoftkeyboard.keyboards.AnyKeyboard createKeyboard(com.anysoftkeyboard.AnyKeyboardContextProvider,int) -> a
com.anysoftkeyboard.keyboards.KeyboardCondensor -> com.anysoftkeyboard.keyboards.aa:
    boolean mKeyboardCondensed -> a
    java.util.Map mKeySizesMap -> b
    com.anysoftkeyboard.keyboards.AnyKeyboard mKeyboard -> c
    void setCondensedKeys(boolean) -> a
    int condenseLeftSide(float,int,com.anysoftkeyboard.keyboards.Keyboard$Key,int) -> a
    void condenseRightSide(float,int,int,java.util.Stack,com.anysoftkeyboard.keyboards.Keyboard$Key) -> a
com.anysoftkeyboard.keyboards.KeyboardCondensor$KeySize -> com.anysoftkeyboard.keyboards.s:
    int width -> a
    int height -> b
    int X -> c
    int Y -> d
com.anysoftkeyboard.keyboards.KeyboardDimens -> com.anysoftkeyboard.keyboards.d:
    int getKeyboardMaxWidth() -> a
    float getKeyHorizontalGap() -> b
    float getRowVerticalGap() -> c
    int getNormalKeyHeight() -> d
    int getSmallKeyHeight() -> e
    int getLargeKeyHeight() -> f
com.anysoftkeyboard.keyboards.KeyboardFactory -> com.anysoftkeyboard.keyboards.n:
    com.anysoftkeyboard.keyboards.KeyboardFactory msInstance -> b
    java.util.ArrayList getAllAvailableKeyboards(android.content.Context) -> a
    java.util.ArrayList getEnabledKeyboards(com.anysoftkeyboard.AnyKeyboardContextProvider) -> a
    com.anysoftkeyboard.addons.AddOn createConcreateAddOn(android.content.Context,java.lang.String,int,java.lang.String,int,android.util.AttributeSet) -> a
com.anysoftkeyboard.keyboards.KeyboardSwitcher -> com.anysoftkeyboard.keyboards.j:
    java.lang.String TAG -> a
    com.anysoftkeyboard.keyboards.AnyKeyboard[] EMPTY_AnyKeyboards -> b
    int KEYBOARDMODE_NORMAL -> c
    int KEYBOARDMODE_URL -> d
    int KEYBOARDMODE_EMAIL -> e
    int KEYBOARDMODE_IM -> f
    com.anysoftkeyboard.keyboards.views.AnyKeyboardView mInputView -> g
    com.anysoftkeyboard.AnySoftKeyboard mContext -> h
    int mLastSelectedSymbolsKeyboard -> i
    com.anysoftkeyboard.keyboards.AnyKeyboard[] mSymbolsKeyboardsArray -> j
    com.anysoftkeyboard.keyboards.AnyKeyboard[] mAlphabetKeyboards -> k
    com.anysoftkeyboard.keyboards.KeyboardAddOnAndBuilder[] mAlphabetKeyboardsCreators -> l
    boolean mRightToLeftMode -> m
    boolean mKeyboardLocked -> n
    int mLastSelectedKeyboard -> o
    boolean mAlphabetMode -> p
    int mLastKeyboardMode -> q
    int mLatinKeyboardIndex -> r
    com.anysoftkeyboard.keyboards.KeyboardDimens mKeyboardDimens -> s
    int[] $SWITCH_TABLE$com$anysoftkeyboard$keyboards$KeyboardSwitcher$NextKeyboardType -> t
    void setInputView(com.anysoftkeyboard.keyboards.views.AnyKeyboardView) -> a
    com.anysoftkeyboard.keyboards.AnyKeyboard getSymbolsKeyboard(int,int) -> a
    com.anysoftkeyboard.keyboards.AnyKeyboard[] getAlphabetKeyboards() -> h
    com.anysoftkeyboard.keyboards.KeyboardAddOnAndBuilder[] getEnabledKeyboardsBuilders() -> a
    void makeKeyboards(boolean) -> a
    int findLatinKeyboardIndex() -> i
    void resetKeyboardsCache() -> j
    void setKeyboardMode(int,android.view.inputmethod.EditorInfo) -> a
    int getKeyboardMode(android.view.inputmethod.EditorInfo) -> b
    boolean isAlphabetMode() -> b
    com.anysoftkeyboard.keyboards.AnyKeyboard nextAlphabetKeyboard(android.view.inputmethod.EditorInfo,java.lang.String) -> a
    com.anysoftkeyboard.keyboards.AnyKeyboard getLockedKeyboard(android.view.inputmethod.EditorInfo) -> c
    com.anysoftkeyboard.keyboards.AnyKeyboard nextAlphabetKeyboard(android.view.inputmethod.EditorInfo,boolean) -> a
    com.anysoftkeyboard.keyboards.AnyKeyboard nextSymbolsKeyboard(android.view.inputmethod.EditorInfo) -> d
    com.anysoftkeyboard.keyboards.AnyKeyboard setKeyboard(android.view.inputmethod.EditorInfo,com.anysoftkeyboard.keyboards.AnyKeyboard) -> a
    com.anysoftkeyboard.keyboards.AnyKeyboard getCurrentKeyboard() -> c
    com.anysoftkeyboard.keyboards.AnyKeyboard getAlphabetKeyboard(int,int) -> b
    com.anysoftkeyboard.keyboards.AnyKeyboard nextKeyboard(android.view.inputmethod.EditorInfo,com.anysoftkeyboard.keyboards.KeyboardSwitcher$NextKeyboardType) -> a
    com.anysoftkeyboard.keyboards.AnyKeyboard nextAlterKeyboard(android.view.inputmethod.EditorInfo) -> a
    boolean isCurrentKeyboardPhysical() -> d
    void onLowMemory() -> e
    boolean isRightToLeftMode() -> f
    boolean isKeyRequireSwitchToAlphabet(int) -> a
    boolean shouldPopupForLanguageSwitch() -> g
    com.anysoftkeyboard.AnySoftKeyboard access$0(com.anysoftkeyboard.keyboards.KeyboardSwitcher) -> a
    int[] $SWITCH_TABLE$com$anysoftkeyboard$keyboards$KeyboardSwitcher$NextKeyboardType() -> k
com.anysoftkeyboard.keyboards.KeyboardSwitcher$1 -> com.anysoftkeyboard.keyboards.p:
    com.anysoftkeyboard.keyboards.KeyboardSwitcher this$0 -> a
    android.content.res.Resources val$res -> b
    int getSmallKeyHeight() -> e
    float getRowVerticalGap() -> c
    int getNormalKeyHeight() -> d
    int getLargeKeyHeight() -> f
    int getKeyboardMaxWidth() -> a
    float getKeyHorizontalGap() -> b
com.anysoftkeyboard.keyboards.KeyboardSwitcher$NextKeyboardType -> com.anysoftkeyboard.keyboards.g:
    com.anysoftkeyboard.keyboards.KeyboardSwitcher$NextKeyboardType Symbols -> a
    com.anysoftkeyboard.keyboards.KeyboardSwitcher$NextKeyboardType Alphabet -> b
    com.anysoftkeyboard.keyboards.KeyboardSwitcher$NextKeyboardType AlphabetSupportsPhysical -> c
    com.anysoftkeyboard.keyboards.KeyboardSwitcher$NextKeyboardType Any -> d
    com.anysoftkeyboard.keyboards.KeyboardSwitcher$NextKeyboardType PreviousAny -> e
    com.anysoftkeyboard.keyboards.KeyboardSwitcher$NextKeyboardType AnyInsideMode -> f
    com.anysoftkeyboard.keyboards.KeyboardSwitcher$NextKeyboardType OtherMode -> g
    com.anysoftkeyboard.keyboards.KeyboardSwitcher$NextKeyboardType[] ENUM$VALUES -> h
    com.anysoftkeyboard.keyboards.KeyboardSwitcher$NextKeyboardType[] values() -> values
    com.anysoftkeyboard.keyboards.KeyboardSwitcher$NextKeyboardType valueOf(java.lang.String) -> valueOf
com.anysoftkeyboard.keyboards.physical.HardKeyboardActionImpl -> com.anysoftkeyboard.keyboards.a.a:
    int mKeyCode -> a
    boolean mChanegd -> b
    long mMetaState -> c
    int META_ACTIVE_ALT -> d
    int META_ACTIVE_SHIFT -> e
    void initializeAction(android.view.KeyEvent,long) -> a
    int getKeyCode() -> a
    boolean isAltActive() -> b
    boolean isShiftActive() -> c
    void setNewKeyCode(int) -> a
    boolean getKeyCodeWasChanged() -> d
com.anysoftkeyboard.keyboards.physical.MyMetaKeyKeyListener -> com.anysoftkeyboard.keyboards.a.b:
    java.lang.Object CAP -> a
    java.lang.Object ALT -> b
    java.lang.Object SYM -> c
    java.lang.Object SELECTING -> d
    int getMetaState(long) -> a
    int getMetaState(long,int) -> a
    int getActive(long,int,int,int) -> a
    long adjustMetaAfterKeypress(long) -> b
    long adjust(long,int,long) -> a
    long handleKeyDown$41e3bb3c(long,int) -> b
    long press(long,int,long) -> b
    long handleKeyUp$41e3bb3c(long,int) -> c
    long release(long,int,long) -> c
com.anysoftkeyboard.keyboards.views.AnyKeyboardBaseView -> com.anysoftkeyboard.keyboards.views.AnyKeyboardBaseView:
    int mKeyRepeatInterval -> h
    int[] LONG_PRESSABLE_STATE_SET -> i
    int[] DRAWABLE_STATE_MODIFIER_NORMAL -> j
    int[] DRAWABLE_STATE_MODIFIER_PRESSED -> k
    int[] DRAWABLE_STATE_MODIFIER_LOCKED -> l
    int[] DRAWABLE_STATE_ACTION_NORMAL -> m
    int[] DRAWABLE_STATE_ACTION_DONE -> n
    int[] DRAWABLE_STATE_ACTION_SEARCH -> o
    int[] DRAWABLE_STATE_ACTION_GO -> p
    float mKeyTextSize -> q
    android.graphics.Paint$FontMetrics mTextFM -> r
    android.content.res.ColorStateList mKeyTextColor -> s
    android.graphics.Typeface mKeyTextStyle -> t
    float mLabelTextSize -> u
    android.graphics.Paint$FontMetrics mLabelFM -> v
    float mHintTextSize -> w
    android.content.res.ColorStateList mHintTextColor -> x
    android.graphics.Paint$FontMetrics mHintTextFM -> y
    int mSymbolColorScheme -> z
    int mShadowColor -> A
    int mShadowRadius -> B
    int mShadowOffsetX -> C
    int mShadowOffsetY -> D
    android.graphics.drawable.Drawable mKeyBackground -> E
    android.graphics.drawable.Drawable mShiftIcon -> F
    android.graphics.drawable.Drawable mControlIcon -> G
    android.graphics.drawable.Drawable mActionKeyIcon -> H
    android.graphics.drawable.Drawable mDeleteKeyIcon -> I
    android.graphics.drawable.Drawable mSpaceKeyIcon -> J
    android.graphics.drawable.Drawable mTabKeyIcon -> K
    android.graphics.drawable.Drawable mCancelKeyIcon -> L
    android.graphics.drawable.Drawable mGlobeKeyIcon -> M
    android.graphics.drawable.Drawable mMicKeyIcon -> N
    android.graphics.drawable.Drawable mSettingsKeyIcon -> O
    android.graphics.drawable.Drawable mArrowRightKeyIcon -> P
    android.graphics.drawable.Drawable mArrowLeftKeyIcon -> Q
    android.graphics.drawable.Drawable mArrowUpKeyIcon -> R
    android.graphics.drawable.Drawable mArrowDownKeyIcon -> S
    float mBackgroundDimAmount -> T
    float mKeyHysteresisDistance -> U
    float mVerticalCorrection -> V
    int mPreviewOffset -> W
    com.anysoftkeyboard.keyboards.AnyKeyboard mKeyboard -> Z
    com.anysoftkeyboard.keyboards.Keyboard$Key[] mKeys -> aa
    android.view.ViewGroup mPreviewLayut -> ab
    android.widget.TextView mPreviewText -> ac
    android.widget.ImageView mPreviewIcon -> ad
    android.widget.PopupWindow mPreviewPopup -> ae
    int mPreviewKeyTextSize -> af
    int mPreviewLabelTextSize -> ag
    int mPreviewPaddingWidth -> ah
    int mPreviewPaddingHeight -> ai
    int[] mOffsetInWindow -> aj
    int mOldPreviewKeyIndex -> ak
    boolean mShowPreview -> al
    boolean mShowTouchPoints -> am
    int mPopupPreviewOffsetX -> an
    int mPopupPreviewOffsetY -> ao
    int mWindowY -> ap
    int mPopupPreviewDisplayedY -> aq
    int mDelayBeforePreview -> ar
    int mDelayAfterPreview -> as
    android.widget.PopupWindow mMiniKeyboardPopup -> at
    com.anysoftkeyboard.keyboards.views.AnyKeyboardBaseView mMiniKeyboard -> a
    android.view.View mMiniKeyboardParent -> au
    java.util.WeakHashMap mMiniKeyboardCache -> av
    int mMiniKeyboardOriginX -> aw
    int mMiniKeyboardOriginY -> ax
    long mMiniKeyboardPopupTime -> ay
    int[] mWindowOffset -> az
    float mMiniKeyboardSlideAllowance -> aA
    int mMiniKeyboardTrackerId -> aB
    com.anysoftkeyboard.keyboards.views.OnKeyboardActionListener mKeyboardActionListener -> b
    java.util.ArrayList mPointerTrackers -> aC
    com.anysoftkeyboard.keyboards.views.AnyKeyboardBaseView$PointerQueue mPointerQueue -> aD
    boolean mHasDistinctMultitouch -> aE
    int mOldPointerCount -> aF
    com.anysoftkeyboard.keyboards.views.KeyDetector mKeyDetector -> aG
    android.view.GestureDetector mGestureDetector -> aH
    com.anysoftkeyboard.keyboards.views.SwipeTracker mSwipeTracker -> aI
    int mSwipeVelocityThreshold -> c
    int mSwipeXDistanceThreshold -> d
    int mSwipeYDistanceThreshold -> e
    int mSwipeSpaceXDistanceThreshold -> f
    int mScrollXDistanceThreshold -> aJ
    int mScrollYDistanceThreshold -> aK
    boolean mDisambiguateSwipe -> g
    boolean mDrawPending -> aL
    android.graphics.Rect mDirtyRect -> aM
    android.graphics.Bitmap mBuffer -> aN
    boolean mKeyboardChanged -> aO
    com.anysoftkeyboard.keyboards.Keyboard$Key mInvalidatedKey -> aP
    android.graphics.Canvas mCanvas -> aQ
    android.graphics.Paint mPaint -> aR
    android.graphics.Rect mKeyBackgroundPadding -> aS
    android.graphics.Rect mClipRegion -> aT
    com.anysoftkeyboard.keyboards.views.AnyKeyboardBaseView$UIHandler mHandler -> aU
    android.graphics.drawable.Drawable mPreviewKeyBackground -> aV
    int mPreviewKeyTextColor -> aW
    com.anysoftkeyboard.keyboards.views.KeyboardDimensFromTheme mKeyboardDimens -> aX
    boolean setValueFromTheme(android.content.res.TypedArray,int[],int) -> a
    boolean setValueFromTheme_v2(android.content.res.TypedArray,int) -> a
    boolean setKeyIconValueFromTheme(android.content.res.TypedArray,int) -> b
    int getKeyboardStyleResId(com.anysoftkeyboard.theme.KeyboardTheme) -> a
    void reloadSwipeThresholdsSettings(android.content.res.Resources) -> a
    void setOnKeyboardActionListener(com.anysoftkeyboard.keyboards.views.OnKeyboardActionListener) -> a
    com.anysoftkeyboard.keyboards.views.OnKeyboardActionListener getOnKeyboardActionListener() -> f
    void setKeyboard(com.anysoftkeyboard.keyboards.AnyKeyboard) -> a
    void setKeyboard(com.anysoftkeyboard.keyboards.AnyKeyboard,float) -> a
    com.anysoftkeyboard.keyboards.AnyKeyboard getKeyboard() -> g
    boolean hasDistinctMultitouch() -> a
    boolean setShifted(boolean) -> a
    boolean isShifted() -> h
    boolean setControl(boolean) -> b
    boolean isControl() -> i
    void setPreviewEnabled(boolean) -> c
    void setProximityCorrectionEnabled$1385ff() -> j
    java.lang.CharSequence adjustCase(java.lang.CharSequence) -> a
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onDraw(android.graphics.Canvas) -> onDraw
    void onBufferDraw() -> c
    android.graphics.drawable.Drawable getIconToDrawForKey(com.anysoftkeyboard.keyboards.Keyboard$Key,boolean) -> a
    void dismissKeyPreview() -> k
    void showPreview(int,com.anysoftkeyboard.keyboards.views.PointerTracker) -> a
    void invalidateAllKeys() -> l
    void invalidateKey(com.anysoftkeyboard.keyboards.Keyboard$Key) -> a
    com.anysoftkeyboard.keyboards.KeyboardDimens getThemedKeyboardDimens() -> m
    boolean onLongPress(android.content.Context,com.anysoftkeyboard.keyboards.Keyboard$Key,boolean,boolean) -> a
    android.view.MotionEvent generateMiniKeyboardMotionEvent(int,int,int,long) -> a
    com.anysoftkeyboard.keyboards.views.PointerTracker getPointerTracker(int) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean isFirstDownEventInsideSpaceBar() -> b
    com.anysoftkeyboard.keyboards.Keyboard$Key findKeyByKeyCode$27383fb2() -> n
    boolean closing() -> o
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String) -> onSharedPreferenceChanged
    boolean isPopupShowing() -> p
    boolean dismissPopupKeyboard() -> d
    boolean handleBack() -> q
    void access$0(com.anysoftkeyboard.keyboards.views.AnyKeyboardBaseView,int,com.anysoftkeyboard.keyboards.views.PointerTracker) -> a
    android.widget.PopupWindow access$1(com.anysoftkeyboard.keyboards.views.AnyKeyboardBaseView) -> a
    int access$2(com.anysoftkeyboard.keyboards.views.AnyKeyboardBaseView) -> b
    boolean access$3(com.anysoftkeyboard.keyboards.views.AnyKeyboardBaseView,int,com.anysoftkeyboard.keyboards.views.PointerTracker) -> b
com.anysoftkeyboard.keyboards.views.AnyKeyboardBaseView$1 -> com.anysoftkeyboard.keyboards.views.g:
    com.anysoftkeyboard.keyboards.views.AnyKeyboardBaseView this$0 -> a
    com.anysoftkeyboard.keyboards.AnyPopupKeyboard val$keyboard -> b
    void onKey(int,int[],int,int) -> a
    void onMultiTap() -> b
    void onText(java.lang.CharSequence) -> a
    void onCancel() -> j
    void onSwipeLeft(boolean) -> b
    void onSwipeRight(boolean) -> a
    void onSwipeUp(boolean) -> d
    void onSwipeDown(boolean) -> c
    void onPinch() -> c
    void onSeparate() -> d
    void onPress(int) -> a
    void onRelease(int) -> b
    void endInputConnectionEdit() -> h
    void startInputConnectionEdit() -> g
com.anysoftkeyboard.keyboards.views.AnyKeyboardBaseView$PointerQueue -> com.anysoftkeyboard.keyboards.views.b:
    java.util.LinkedList mQueue -> a
    void add(com.anysoftkeyboard.keyboards.views.PointerTracker) -> a
    int lastIndexOf(com.anysoftkeyboard.keyboards.views.PointerTracker) -> b
    void releaseAllPointersOlderThan(com.anysoftkeyboard.keyboards.views.PointerTracker,long) -> a
    void releaseAllPointersExcept(com.anysoftkeyboard.keyboards.views.PointerTracker,long) -> b
    void remove(com.anysoftkeyboard.keyboards.views.PointerTracker) -> c
com.anysoftkeyboard.keyboards.views.AnyKeyboardBaseView$UIHandler -> com.anysoftkeyboard.keyboards.views.n:
    boolean mInKeyRepeat -> b
    com.anysoftkeyboard.keyboards.views.AnyKeyboardBaseView this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
    void startKeyRepeatTimer(long,int,com.anysoftkeyboard.keyboards.views.PointerTracker) -> a
    void cancelKeyRepeatTimer() -> a
    boolean isInKeyRepeat() -> b
    void cancelKeyTimers() -> c
    void cancelAllMessages() -> d
com.anysoftkeyboard.keyboards.views.AnyKeyboardView -> com.anysoftkeyboard.keyboards.views.AnyKeyboardView:
    boolean mExtensionVisible -> h
    int mExtensionKeyboardYActivationPoint -> i
    int mExtensionKeyboardPopupOffset -> j
    int mExtensionKeyboardYDismissPoint -> k
    com.anysoftkeyboard.keyboards.Keyboard$Key mExtensionKey -> l
    com.anysoftkeyboard.keyboards.Keyboard$Key mUtilityKey -> m
    com.anysoftkeyboard.keyboards.Keyboard$Key mSpaceBarKey -> n
    android.graphics.Point mFirstTouchPoint -> o
    java.lang.Boolean mCachedIsFirstDownEventInsideSpaceBar -> p
    long mExtensionKeyboardAreaEntranceTime -> q
    void setKeyboard(com.anysoftkeyboard.keyboards.AnyKeyboard) -> a
    int getKeyboardStyleResId(com.anysoftkeyboard.theme.KeyboardTheme) -> a
    boolean isFirstDownEventInsideSpaceBar() -> b
    void simulateLongPress$13462e() -> c
    void draw(android.graphics.Canvas) -> draw
    boolean onLongPress(android.content.Context,com.anysoftkeyboard.keyboards.Keyboard$Key,boolean,boolean) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean dismissPopupKeyboard() -> d
    void showQuickTextPopupKeyboard(android.content.Context,com.anysoftkeyboard.quicktextkeys.QuickTextKey) -> a
    void openUtilityKeyboard() -> e
com.anysoftkeyboard.keyboards.views.AskGestureEventsListener -> com.anysoftkeyboard.keyboards.views.l:
    com.anysoftkeyboard.keyboards.views.SwipeTracker mSwipeTracker -> a
    com.anysoftkeyboard.keyboards.views.AnyKeyboardBaseView mKeyboardView -> b
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    boolean onPinch(float) -> a
    boolean onSeparate(float) -> b
    boolean onDown(android.view.MotionEvent) -> onDown
    void onLongPress(android.view.MotionEvent) -> onLongPress
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
com.anysoftkeyboard.keyboards.views.CandidateView -> com.anysoftkeyboard.keyboards.views.CandidateView:
    com.anysoftkeyboard.AnySoftKeyboard mService -> a
    java.util.ArrayList mSuggestions -> b
    boolean mShowingCompletions -> c
    java.lang.CharSequence mSelectedString -> d
    int mSelectedIndex -> e
    int mTouchX -> f
    android.graphics.drawable.Drawable mSelectionHighlight -> g
    boolean mTypedWordValid -> h
    boolean mHaveMinimalSuggestion -> i
    android.graphics.Rect mBgPadding -> j
    android.graphics.drawable.Drawable mDivider -> k
    int[] mWordWidth -> l
    int[] mWordX -> m
    int mColorNormal -> n
    int mColorRecommended -> o
    int mColorOther -> p
    android.graphics.Paint mPaint -> q
    boolean mScrolled -> r
    boolean mShowingAddToDictionary -> s
    java.lang.CharSequence mAddToDictionaryHint -> t
    int mTargetScrollX -> u
    int mMinTouchableWidth -> v
    int mTotalWidth -> w
    android.view.GestureDetector mGestureDetector -> x
    void setService(com.anysoftkeyboard.AnySoftKeyboard) -> a
    int computeHorizontalScrollRange() -> computeHorizontalScrollRange
    void onDraw(android.graphics.Canvas) -> onDraw
    void setSuggestions(java.util.List,boolean,boolean,boolean) -> a
    void showAddToDictionaryHint(java.lang.CharSequence) -> a
    boolean dismissAddToDictionaryHint() -> a
    void clear() -> b
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void access$0(com.anysoftkeyboard.keyboards.views.CandidateView,boolean) -> a
    boolean access$1(com.anysoftkeyboard.keyboards.views.CandidateView) -> a
    int access$2(com.anysoftkeyboard.keyboards.views.CandidateView) -> b
    void access$3(com.anysoftkeyboard.keyboards.views.CandidateView,int) -> a
com.anysoftkeyboard.keyboards.views.CandidateView$CandidateStripGestureListener -> com.anysoftkeyboard.keyboards.views.c:
    int mTouchSlopSquare -> a
    com.anysoftkeyboard.keyboards.views.CandidateView this$0 -> b
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
com.anysoftkeyboard.keyboards.views.KeyDetector -> com.anysoftkeyboard.keyboards.views.i:
    com.anysoftkeyboard.keyboards.Keyboard mKeyboard -> a
    com.anysoftkeyboard.keyboards.Keyboard$Key[] mKeys -> d
    int mCorrectionX -> e
    int mCorrectionY -> f
    boolean mProximityCorrectOn -> b
    int mProximityThresholdSquare -> c
    com.anysoftkeyboard.keyboards.Keyboard$Key[] setKeyboard(com.anysoftkeyboard.keyboards.Keyboard) -> a
    void setCorrection(float,float) -> a
    int getTouchX(int) -> a
    int getTouchY(int) -> b
    com.anysoftkeyboard.keyboards.Keyboard$Key[] getKeys() -> b
    void setProximityCorrectionEnabled$1385ff() -> c
    void setProximityThreshold(int) -> c
    int[] newCodeArray() -> d
    int getMaxNearbyKeys() -> a
    int getKeyIndexAndNearbyCodes(int,int,int[]) -> a
com.anysoftkeyboard.keyboards.views.KeyboardDimensFromTheme -> com.anysoftkeyboard.keyboards.views.k:
    int mMaxKeyboardWidth -> a
    float mKeyHorizontalGap -> b
    float mRowVerticalGap -> c
    int mNormalKeyHeight -> d
    int mSmallKeyHeight -> e
    int mLargeKeyHeight -> f
    int getKeyboardMaxWidth() -> a
    float getKeyHorizontalGap() -> b
    float getRowVerticalGap() -> c
    int getNormalKeyHeight() -> d
    int getSmallKeyHeight() -> e
    int getLargeKeyHeight() -> f
    void setKeyboardMaxWidth(int) -> a
    void setHorizontalKeyGap(float) -> a
    void setVerticalRowGap(float) -> b
    void setNormalKeyHeight(float) -> c
    void setLargeKeyHeight(float) -> d
    void setSmallKeyHeight(float) -> e
com.anysoftkeyboard.keyboards.views.MiniKeyboardKeyDetector -> com.anysoftkeyboard.keyboards.views.f:
    int mSlideAllowanceSquare -> d
    int mSlideAllowanceSquareTop -> e
    int getMaxNearbyKeys() -> a
    int getKeyIndexAndNearbyCodes(int,int,int[]) -> a
com.anysoftkeyboard.keyboards.views.OnKeyboardActionListener -> com.anysoftkeyboard.keyboards.views.j:
    void onPress(int) -> a
    void onRelease(int) -> b
    void onKey(int,int[],int,int) -> a
    void onMultiTap() -> b
    void onText(java.lang.CharSequence) -> a
    void onCancel() -> j
    void onSwipeLeft(boolean) -> b
    void onSwipeRight(boolean) -> a
    void onSwipeDown(boolean) -> c
    void onSwipeUp(boolean) -> d
    void onPinch() -> c
    void onSeparate() -> d
    void startInputConnectionEdit() -> g
    void endInputConnectionEdit() -> h
com.anysoftkeyboard.keyboards.views.PointerTracker -> com.anysoftkeyboard.keyboards.views.e:
    int mPointerId -> a
    int mDelayBeforeKeyRepeatStart -> b
    int mLongPressKeyTimeout -> c
    int mMultiTapKeyTimeout -> d
    com.anysoftkeyboard.keyboards.views.PointerTracker$UIProxy mProxy -> e
    com.anysoftkeyboard.keyboards.views.AnyKeyboardBaseView$UIHandler mHandler -> f
    com.anysoftkeyboard.keyboards.views.KeyDetector mKeyDetector -> g
    com.anysoftkeyboard.keyboards.views.OnKeyboardActionListener mListener -> h
    boolean mHasDistinctMultitouch -> i
    com.anysoftkeyboard.keyboards.Keyboard$Key[] mKeys -> j
    int mKeyHysteresisDistanceSquared -> k
    com.anysoftkeyboard.keyboards.views.PointerTracker$KeyState mKeyState -> l
    boolean mKeyboardLayoutHasBeenChanged -> m
    boolean mKeyAlreadyProcessed -> n
    boolean mIsRepeatableKey -> o
    boolean mIsInSlidingKeyInput -> p
    int mLastSentIndex -> q
    int mTapCount -> r
    long mLastTapTime -> s
    boolean mInMultiTap -> t
    java.lang.StringBuilder mPreviewLabel -> u
    int mPreviousKey -> v
    void setOnKeyboardActionListener(com.anysoftkeyboard.keyboards.views.OnKeyboardActionListener) -> a
    void setKeyboard(com.anysoftkeyboard.keyboards.Keyboard$Key[],float) -> a
    boolean isValidKeyIndex(int) -> d
    com.anysoftkeyboard.keyboards.Keyboard$Key getKey(int) -> a
    boolean isModifierInternal(int) -> e
    boolean isModifier() -> a
    boolean isOnModifierKey(int,int) -> a
    void updateKey(int) -> b
    void setAlreadyProcessed() -> b
    void onTouchEvent(int,int,int,long) -> a
    void onDownEvent(int,int,long) -> a
    void onMoveEvent$4868d6cf(int,int) -> b
    void onUpEvent(int,int,long) -> b
    void onCancelEvent$4868d6cf() -> c
    void repeatKey(int) -> c
    int getLastX() -> d
    int getLastY() -> e
    boolean isMinorMoveBounce(int,int,int) -> a
    void showKeyPreviewAndUpdateKey(int) -> f
    void startLongPressTimer(int) -> g
    void detectAndSendKey(int,int,int,long) -> b
    java.lang.CharSequence getPreviewText(com.anysoftkeyboard.keyboards.Keyboard$Key,boolean) -> a
    void resetMultiTap() -> f
com.anysoftkeyboard.keyboards.views.PointerTracker$KeyState -> com.anysoftkeyboard.keyboards.views.a:
    com.anysoftkeyboard.keyboards.views.KeyDetector mKeyDetector -> a
    int mStartX -> b
    int mStartY -> c
    long mDownTime -> d
    int mKeyIndex -> e
    int mKeyX -> f
    int mKeyY -> g
    int mLastX -> h
    int mLastY -> i
    int getKeyIndex() -> a
    int getKeyX() -> b
    int getKeyY() -> c
    int getLastX() -> d
    int getLastY() -> e
    int onDownKey(int,int,long) -> a
    int onMoveKeyInternal(int,int) -> c
    int onMoveKey(int,int) -> a
    int onMoveToNewKey(int,int,int) -> a
    int onUpKey(int,int) -> b
com.anysoftkeyboard.keyboards.views.PointerTracker$UIProxy -> com.anysoftkeyboard.keyboards.views.d:
    void invalidateKey(com.anysoftkeyboard.keyboards.Keyboard$Key) -> a
    void showPreview(int,com.anysoftkeyboard.keyboards.views.PointerTracker) -> a
    boolean hasDistinctMultitouch() -> a
com.anysoftkeyboard.keyboards.views.ProximityKeyDetector -> com.anysoftkeyboard.keyboards.views.m:
    int[] mDistances -> d
    int getMaxNearbyKeys() -> a
    int getKeyIndexAndNearbyCodes(int,int,int[]) -> a
com.anysoftkeyboard.keyboards.views.SwipeTracker -> com.anysoftkeyboard.keyboards.views.o:
    com.anysoftkeyboard.keyboards.views.SwipeTracker$EventRingBuffer mBuffer -> a
    float mYVelocity -> b
    float mXVelocity -> c
    void addMovement(android.view.MotionEvent) -> a
    void addPoint(float,float,long) -> a
    void computeCurrentVelocity$255e752$13462e() -> a
    float getXVelocity() -> b
    float getYVelocity() -> c
com.anysoftkeyboard.keyboards.views.SwipeTracker$EventRingBuffer -> com.anysoftkeyboard.keyboards.views.h:
    int bufSize -> a
    float[] xBuf -> b
    float[] yBuf -> c
    long[] timeBuf -> d
    int top -> e
    int end -> f
    int count -> g
    void clear() -> a
    int size() -> b
    int index(int) -> d
    int advance(int) -> e
    void add(float,float,long) -> a
    float getX(int) -> a
    float getY(int) -> b
    long getTime(int) -> c
    void dropOldest() -> c
com.anysoftkeyboard.quicktextkeys.QuickTextKey -> com.anysoftkeyboard.d.a:
    int mPopupKeyboardResId -> a
    java.lang.String[] mPopupListNames -> b
    java.lang.String[] mPopupListValues -> c
    int[] mPopupListIconResIds -> d
    java.lang.String mKeyOutputText -> e
    java.lang.String mKeyLabel -> f
    int mKeyIconResId -> g
    int mIconPreviewResId -> h
    boolean isPopupKeyboardUsed() -> a
    int getPopupKeyboardResId() -> b
    java.lang.String[] getPopupListNames() -> c
    java.lang.String[] getPopupListValues() -> d
    int[] getPopupListIconResIds() -> e
    java.lang.String getKeyOutputText() -> f
    java.lang.String getKeyLabel() -> g
    int getKeyIconResId() -> h
    int getIconPreviewResId() -> i
com.anysoftkeyboard.quicktextkeys.QuickTextKeyFactory -> com.anysoftkeyboard.d.b:
    com.anysoftkeyboard.quicktextkeys.QuickTextKeyFactory msInstance -> b
    com.anysoftkeyboard.quicktextkeys.QuickTextKey getCurrentQuickTextKey(com.anysoftkeyboard.AnyKeyboardContextProvider) -> a
    java.util.ArrayList getAllAvailableQuickKeys(android.content.Context) -> a
    com.anysoftkeyboard.addons.AddOn createConcreateAddOn(android.content.Context,java.lang.String,int,java.lang.String,int,android.util.AttributeSet) -> a
com.anysoftkeyboard.receivers.AnySoftKeyboardInstalledReceiver -> com.anysoftkeyboard.receivers.AnySoftKeyboardInstalledReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.anysoftkeyboard.receivers.PackagesChangedReceiver -> com.anysoftkeyboard.receivers.PackagesChangedReceiver:
    java.lang.StringBuffer mSB -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.anysoftkeyboard.theme.KeyboardTheme -> com.anysoftkeyboard.b.a:
    int mThemeResId -> a
    int mPopupThemeResId -> b
    int mIconsThemeResId -> c
    int mThemeScreenshotResId -> d
    int getThemeResId() -> a
    int getPopupThemeResId() -> b
    int getIconsThemeResId() -> c
com.anysoftkeyboard.theme.KeyboardThemeFactory -> com.anysoftkeyboard.b.b:
    com.anysoftkeyboard.theme.KeyboardThemeFactory msInstance -> b
    com.anysoftkeyboard.theme.KeyboardTheme getCurrentKeyboardTheme(android.content.Context) -> a
    java.util.ArrayList getAllAvailableQuickKeys(android.content.Context) -> b
    com.anysoftkeyboard.theme.KeyboardTheme getFallbackTheme(android.content.Context) -> c
    boolean isEventRequiresViewReset$14d1abca() -> b
    com.anysoftkeyboard.addons.AddOn createConcreateAddOn(android.content.Context,java.lang.String,int,java.lang.String,int,android.util.AttributeSet) -> a
com.anysoftkeyboard.ui.MainForm -> com.anysoftkeyboard.ui.MainForm:
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void searchMarketForAddons(android.content.Context,java.lang.String) -> a
    void startSettings(android.content.Context) -> a
com.anysoftkeyboard.ui.MySeekBarPreference -> com.anysoftkeyboard.ui.MySeekBarPreference:
    android.widget.SeekBar mSeekBar -> a
    android.content.Context mContext -> b
    int mDefault -> c
    int mMax -> d
    int mValue -> e
    android.view.View onCreateDialogView() -> onCreateDialogView
    void onBindDialogView(android.view.View) -> onBindDialogView
    void onSetInitialValue(boolean,java.lang.Object) -> onSetInitialValue
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
com.anysoftkeyboard.ui.SendBugReportUiActivity -> com.anysoftkeyboard.ui.SendBugReportUiActivity:
    void onCreate(android.os.Bundle) -> onCreate
com.anysoftkeyboard.ui.SendBugReportUiActivity$1 -> com.anysoftkeyboard.ui.a:
    com.anysoftkeyboard.ui.SendBugReportUiActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.anysoftkeyboard.ui.SendBugReportUiActivity$2 -> com.anysoftkeyboard.ui.b:
    com.anysoftkeyboard.ui.SendBugReportUiActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.anysoftkeyboard.ui.settings.AddOnSelector -> com.anysoftkeyboard.ui.settings.AddOnSelector:
    android.preference.ListPreference mAddonsList -> a
    void onCreate(android.os.Bundle) -> onCreate
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    void onResume() -> onResume
    boolean allowExternalPacks() -> e
    java.lang.String getAdditionalMarketQueryString() -> a
    java.util.List getAllAvailableAddOns() -> d
    int getPrefsLayoutResId() -> c
    int getAddonsListPrefKeyResId() -> b
com.anysoftkeyboard.ui.settings.AddOnSelector$1 -> com.anysoftkeyboard.ui.settings.a:
    com.anysoftkeyboard.ui.settings.AddOnSelector this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.anysoftkeyboard.ui.settings.BottomRowSelector -> com.anysoftkeyboard.ui.settings.BottomRowSelector:
    java.lang.String getAdditionalMarketQueryString() -> a
    int getPrefsLayoutResId() -> c
    int getAddonsListPrefKeyResId() -> b
    java.util.List getAllAvailableAddOns() -> d
    boolean allowExternalPacks() -> e
com.anysoftkeyboard.ui.settings.Dictionaries -> com.anysoftkeyboard.ui.settings.Dictionaries:
    void onCreate(android.os.Bundle) -> onCreate
com.anysoftkeyboard.ui.settings.ExtensionKeyboardSelector -> com.anysoftkeyboard.ui.settings.ExtensionKeyboardSelector:
    java.lang.String getAdditionalMarketQueryString() -> a
    java.util.List getAllAvailableAddOns() -> d
    int getAddonsListPrefKeyResId() -> b
    int getPrefsLayoutResId() -> c
    boolean allowExternalPacks() -> e
com.anysoftkeyboard.ui.settings.KeyboardThemeSelector -> com.anysoftkeyboard.ui.settings.KeyboardThemeSelector:
    java.lang.String getAdditionalMarketQueryString() -> a
    int getAddonsListPrefKeyResId() -> b
    int getPrefsLayoutResId() -> c
    java.util.List getAllAvailableAddOns() -> d
    boolean allowExternalPacks() -> e
com.anysoftkeyboard.ui.settings.Keyboards -> com.anysoftkeyboard.ui.settings.Keyboards:
    android.preference.PreferenceCategory mKeyboardsGroup -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
com.anysoftkeyboard.ui.settings.Keyboards$1 -> com.anysoftkeyboard.ui.settings.b:
    com.anysoftkeyboard.ui.settings.Keyboards this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.anysoftkeyboard.ui.settings.MainSettings -> com.anysoftkeyboard.ui.settings.MainSettings:
    void onCreate(android.os.Bundle) -> onCreate
    android.content.pm.PackageInfo getPackageInfo(android.content.Context) -> a
com.anysoftkeyboard.ui.settings.MainSettings$1 -> com.anysoftkeyboard.ui.settings.c:
    com.anysoftkeyboard.ui.settings.MainSettings this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.anysoftkeyboard.ui.settings.QuickTextKeys -> com.anysoftkeyboard.ui.settings.QuickTextKeys:
    java.lang.String getAdditionalMarketQueryString() -> a
    int getAddonsListPrefKeyResId() -> b
    int getPrefsLayoutResId() -> c
    java.util.List getAllAvailableAddOns() -> d
    boolean allowExternalPacks() -> e
com.anysoftkeyboard.ui.settings.TopRowSelector -> com.anysoftkeyboard.ui.settings.TopRowSelector:
    java.lang.String getAdditionalMarketQueryString() -> a
    java.util.List getAllAvailableAddOns() -> d
    int getPrefsLayoutResId() -> c
    int getAddonsListPrefKeyResId() -> b
    boolean allowExternalPacks() -> e
com.anysoftkeyboard.ui.settings.Tweaks -> com.anysoftkeyboard.ui.settings.Tweaks:
    void onCreate(android.os.Bundle) -> onCreate
com.anysoftkeyboard.ui.tutorials.BaseTutorialActivity -> com.anysoftkeyboard.ui.tutorials.BaseTutorialActivity:
    void onCreate(android.os.Bundle) -> onCreate
    int getLayoutResId() -> a
    int getTitleResId() -> b
    void onCloseClicked(android.view.View) -> onCloseClicked
    void onPause() -> onPause
    void onClick(android.view.View) -> onClick
com.anysoftkeyboard.ui.tutorials.ChangeLogActivity -> com.anysoftkeyboard.ui.tutorials.ChangeLogActivity:
    void onCreate(android.os.Bundle) -> onCreate
    int getLayoutResId() -> a
    int getTitleResId() -> b
com.anysoftkeyboard.ui.tutorials.ChangeLogActivity$1 -> com.anysoftkeyboard.ui.tutorials.a:
    com.anysoftkeyboard.ui.tutorials.ChangeLogActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.anysoftkeyboard.ui.tutorials.IntentToLaunch -> com.anysoftkeyboard.ui.tutorials.b:
    android.content.Intent IntentToStart -> a
    int NotificationIcon -> b
    int NotificationTitle -> c
    int NotificationText -> d
com.anysoftkeyboard.ui.tutorials.TestersNoticeActivity -> com.anysoftkeyboard.ui.tutorials.TestersNoticeActivity:
    int getLayoutResId() -> a
    int getTitleResId() -> b
com.anysoftkeyboard.ui.tutorials.TutorialsProvider -> com.anysoftkeyboard.ui.tutorials.c:
    java.util.ArrayList msActivitiesToShow -> a
    boolean linearSearch(java.lang.String,java.lang.String) -> a
    void ShowTutorialsIfNeeded(android.content.Context) -> a
    void onServiceDestroy() -> a
    void markWelcomeActivityAsShown(android.content.Context) -> b
    boolean firstTestersTimeVersionLoaded(android.content.Context) -> d
    int getPackageVersion(android.content.Context) -> e
    void showNotificationIcon(android.content.Context) -> c
com.anysoftkeyboard.ui.tutorials.WelcomeHowToNoticeActivity -> com.anysoftkeyboard.ui.tutorials.WelcomeHowToNoticeActivity:
    int getLayoutResId() -> a
    int getTitleResId() -> b
    void onResume() -> onResume
com.anysoftkeyboard.utils.IMEUtil -> com.anysoftkeyboard.a.c:
com.anysoftkeyboard.utils.IMEUtil$GCUtils -> com.anysoftkeyboard.a.d:
    com.anysoftkeyboard.utils.IMEUtil$GCUtils sInstance -> a
    int mGCTryCount -> b
    com.anysoftkeyboard.utils.IMEUtil$GCUtils getInstance() -> a
    void reset() -> b
    boolean tryGCOrWait$f3e38a6() -> c
com.anysoftkeyboard.utils.ModifierKeyState -> com.anysoftkeyboard.a.b:
    int mState -> a
    void onPress() -> a
    void onRelease() -> b
    void onOtherKeyPressed() -> c
    boolean isMomentary() -> d
com.anysoftkeyboard.utils.Workarounds -> com.anysoftkeyboard.a.a:
    int ms_ApiLevel -> a
    boolean isRightToLeftCharacter(char) -> a
    boolean isAltSpaceLangSwitchNotPossible() -> a
    int getApiLevel() -> b
    boolean doubleActionKeyDisableWorkAround(android.view.inputmethod.EditorInfo) -> a
com.anysoftkeyboard.utils.XmlUtils -> com.anysoftkeyboard.a.e:
    void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String) -> a
    void nextElement(org.xmlpull.v1.XmlPullParser) -> a
com.anysoftkeyboard.voice.ActivityHelper -> com.anysoftkeyboard.voice.ActivityHelper:
    com.anysoftkeyboard.voice.ServiceBridge mServiceBridge -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void notifyResult(java.lang.String) -> a
    void access$0(com.anysoftkeyboard.voice.ActivityHelper,java.lang.String) -> a
com.anysoftkeyboard.voice.ActivityHelper$1 -> com.anysoftkeyboard.voice.h:
    com.anysoftkeyboard.voice.ActivityHelper this$0 -> a
    java.lang.String[] val$recognitionResults -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.anysoftkeyboard.voice.ActivityHelper$2 -> com.anysoftkeyboard.voice.f:
    com.anysoftkeyboard.voice.ActivityHelper this$0 -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.anysoftkeyboard.voice.ActivityHelper$3 -> com.anysoftkeyboard.voice.g:
    com.anysoftkeyboard.voice.ActivityHelper this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.anysoftkeyboard.voice.ImeTrigger -> com.anysoftkeyboard.voice.q:
    android.inputmethodservice.InputMethodService mInputMethodService -> a
    void startVoiceRecognition(java.lang.String) -> a
    android.view.inputmethod.InputMethodManager getInputMethodManager(android.inputmethodservice.InputMethodService) -> b
    android.view.inputmethod.InputMethodInfo getVoiceImeInputMethodInfo(android.view.inputmethod.InputMethodManager) -> a
    boolean isInstalled(android.inputmethodservice.InputMethodService) -> a
    void onStartInputView() -> a
com.anysoftkeyboard.voice.IntentApiTrigger -> com.anysoftkeyboard.voice.l:
    android.inputmethodservice.InputMethodService mInputMethodService -> a
    com.anysoftkeyboard.voice.ServiceBridge mServiceBridge -> b
    java.lang.String mLastRecognitionResult -> c
    java.util.Set mUpperCaseChars -> d
    android.os.Handler mHandler -> e
    android.os.IBinder mToken -> f
    void startVoiceRecognition(java.lang.String) -> a
    void onStartInputView() -> a
    java.lang.String format(android.view.inputmethod.ExtractedText,java.lang.String) -> a
    void access$0(com.anysoftkeyboard.voice.IntentApiTrigger,java.lang.String) -> a
    void access$1(com.anysoftkeyboard.voice.IntentApiTrigger) -> a
com.anysoftkeyboard.voice.IntentApiTrigger$1 -> com.anysoftkeyboard.voice.p:
    com.anysoftkeyboard.voice.IntentApiTrigger this$0 -> a
    void onRecognitionResult(java.lang.String) -> a
com.anysoftkeyboard.voice.IntentApiTrigger$2 -> com.anysoftkeyboard.voice.o:
    com.anysoftkeyboard.voice.IntentApiTrigger this$0 -> a
    void run() -> run
com.anysoftkeyboard.voice.IntentApiTrigger$Callback -> com.anysoftkeyboard.voice.a:
    void onRecognitionResult(java.lang.String) -> a
com.anysoftkeyboard.voice.ServiceBridge -> com.anysoftkeyboard.voice.k:
    com.anysoftkeyboard.voice.IntentApiTrigger$Callback mCallback -> a
    com.anysoftkeyboard.voice.IntentApiTrigger$Callback access$0(com.anysoftkeyboard.voice.ServiceBridge) -> a
com.anysoftkeyboard.voice.ServiceBridge$1 -> com.anysoftkeyboard.voice.e:
    com.anysoftkeyboard.voice.ServiceBridge this$0 -> a
    android.content.Context val$context -> b
    com.anysoftkeyboard.voice.ServiceBridge$ConnectionRequest val$conReq -> c
    void onResult(java.lang.String) -> a
com.anysoftkeyboard.voice.ServiceBridge$ConnectionRequest -> com.anysoftkeyboard.voice.j:
    java.lang.String mLanguageCode -> a
    com.anysoftkeyboard.voice.ServiceHelper$Callback mServiceCallback -> b
    com.anysoftkeyboard.voice.ServiceBridge this$0 -> c
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
    void access$1(com.anysoftkeyboard.voice.ServiceBridge$ConnectionRequest,com.anysoftkeyboard.voice.ServiceHelper$Callback) -> a
com.anysoftkeyboard.voice.ServiceBridge$ConnectionResponse -> com.anysoftkeyboard.voice.n:
    java.lang.String mRecognitionResult -> a
    android.content.Context mContext -> b
    com.anysoftkeyboard.voice.ServiceBridge this$0 -> c
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
com.anysoftkeyboard.voice.ServiceHelper -> com.anysoftkeyboard.voice.ServiceHelper:
    android.os.IBinder mBinder -> a
    com.anysoftkeyboard.voice.ServiceHelper$Callback mCallback -> b
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    void startRecognition$d2e3315(com.anysoftkeyboard.voice.ServiceHelper$Callback) -> a
    void notifyResult(java.lang.String) -> a
com.anysoftkeyboard.voice.ServiceHelper$Callback -> com.anysoftkeyboard.voice.r:
    void onResult(java.lang.String) -> a
com.anysoftkeyboard.voice.ServiceHelper$ServiceHelperBinder -> com.anysoftkeyboard.voice.c:
    com.anysoftkeyboard.voice.ServiceHelper this$0 -> a
com.anysoftkeyboard.voice.Trigger -> com.anysoftkeyboard.voice.i:
    void startVoiceRecognition(java.lang.String) -> a
    void onStartInputView() -> a
com.anysoftkeyboard.voice.VoiceInput -> com.anysoftkeyboard.voice.m:
    void startVoiceRecognition(java.lang.String) -> a
    void onStartInputView() -> a
com.anysoftkeyboard.voice.VoiceInputNotInstalledActivity -> com.anysoftkeyboard.voice.VoiceInputNotInstalledActivity:
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
com.anysoftkeyboard.voice.VoiceRecognitionTrigger -> com.anysoftkeyboard.voice.b:
    android.inputmethodservice.InputMethodService mInputMethodService -> a
    com.anysoftkeyboard.voice.Trigger mTrigger -> b
    com.anysoftkeyboard.voice.Trigger getTrigger() -> b
    void startVoiceRecognition(java.lang.String) -> a
    void onStartInputView() -> a
com.anysoftkeyboard.voice.VoiceRecognitionTriggerV11 -> com.anysoftkeyboard.voice.d:
    com.anysoftkeyboard.voice.Trigger getTrigger() -> b
com.menny.android.anysoftkeyboard.AnyApplication -> com.menny.android.anysoftkeyboard.AnyApplication:
    com.anysoftkeyboard.Configuration msConfig -> a
    com.anysoftkeyboard.devicespecific.DeviceSpecific msDeviceSpecific -> b
    com.anysoftkeyboard.backup.CloudBackupRequester msCloudBackuper -> c
    void onCreate() -> onCreate
    com.anysoftkeyboard.Configuration getConfig() -> a
    com.anysoftkeyboard.devicespecific.DeviceSpecific getDeviceSpecific() -> b
    void requestBackupToCloud() -> c
com.menny.android.anysoftkeyboard.MainSettings -> com.menny.android.anysoftkeyboard.MainSettings:
com.menny.android.anysoftkeyboard.R -> com.menny.android.anysoftkeyboard.b:
com.menny.android.anysoftkeyboard.R$styleable -> com.menny.android.anysoftkeyboard.a:
    int[] AnyKeyboardBaseView -> a
    int[] AnyKeyboardBaseViewV2 -> b
    int[] AnySoftKeyboardKeyIcons -> c
    int[] Keyboard -> d
    int[] Keyboard_Key -> e
    int[] Keyboard_Row -> f
    int[] keyActionType -> g
    int[] keyType -> h
com.menny.android.anysoftkeyboard.SoftKeyboard -> com.menny.android.anysoftkeyboard.SoftKeyboard:
